{
  "openapi": "3.1.0",
  "info": {
    "title": "Aryeo",
    "description": "# Introduction\nThe Aryeo API provides access to the Aryeo platform.",
    "contact": {
      "name": "Admin",
      "url": "https://www.aryeo.com",
      "email": "jarrodp@zillowgroup.com"
    },
    "termsOfService": "https://www.aryeo.com/legal/terms-of-service",
    "x-logo": {
      "url": "https://raw.githubusercontent.com/jarrodparkes/images/master/aryeo-square.svg",
      "backgroundColor": "#fafafa"
    },
    "license": {
      "url": "https://choosealicense.com/licenses/apache-2.0/",
      "name": "Apache 2.0"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.aryeo.com/v1",
      "description": "Production"
    }
  ],
  "tags": [
    {
      "name": "Addresses",
      "description": "Operations related to addresses."
    },
    {
      "name": "Appointments",
      "description": "Operations related to appointments."
    },
    {
      "name": "Discounts",
      "description": "Operations related to discounts."
    },
    {
      "name": "Listings",
      "description": "Operations related to listings."
    },
    {
      "name": "Notes",
      "description": "Operations related to notes."
    },
    {
      "name": "Order Forms",
      "description": "Operations related to order forms."
    },
    {
      "name": "Order Items",
      "description": "Operations related to order items."
    },
    {
      "name": "Orders",
      "description": "Operations related to orders."
    },
    {
      "name": "Payroll",
      "description": "Operations related to payroll."
    },
    {
      "name": "Products",
      "description": "Operations related to products."
    },
    {
      "name": "Scheduling",
      "description": "Operations related to scheduling."
    },
    {
      "name": "Tags",
      "description": "Operations related to tags."
    },
    {
      "name": "Tasks",
      "description": "Operations related to tasks."
    },
    {
      "name": "Users",
      "description": "Operations related to users."
    },
    {
      "name": "Videos",
      "description": "Operations related to videos."
    }
  ],
  "paths": {
    "/addresses": {
      "post": {
        "responses": {
          "201": {
            "description": "AddressResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "post-addresses",
        "description": "Create address.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressPostPayload"
              }
            }
          },
          "description": "AddressPostPayload"
        },
        "security": [],
        "parameters": [],
        "x-external": true,
        "tags": [
          "Addresses"
        ],
        "summary": "Create address."
      }
    },
    "/addresses/{address}": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "address",
            "in": "path",
            "required": true,
            "description": "The ID of an address. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Get address.",
        "operationId": "addresses-address-get",
        "tags": [
          "Addresses"
        ],
        "summary": "Get address.",
        "security": []
      },
      "patch": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "address",
            "in": "path",
            "required": true,
            "description": "The ID of an address. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Update address.",
        "operationId": "addresses-address-patch",
        "tags": [
          "Addresses"
        ],
        "summary": "Update address.",
        "security": []
      }
    },
    "/appointments": {
      "get": {
        "tags": [
          "Appointments"
        ],
        "responses": {
          "200": {
            "description": "AppointmentCollection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentCollection"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-appointments",
        "description": "List appointments. By default, returns a list of appointments that have been scheduled and have not been canceled",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "owner,items,users,order,order.address,order.customer,order.customerGroup,order.listing,order.items,order.items.appointment"
            },
            "in": "query",
            "name": "include",
            "description": "Comma separated list of optional data to include in the response.",
            "allowEmptyValue": true
          },
          {
            "schema": {
              "type": "string",
              "example": "UPCOMING",
              "minLength": 1,
              "maxLength": 100,
              "enum": [
                "PAST",
                "UPCOMING"
              ]
            },
            "in": "query",
            "name": "filter[tense]",
            "description": "Return appointments that are upcoming or in the past."
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "description": "Status of the appointments to return",
                "type": "string",
                "example": "SCHEDULED",
                "minLength": 1,
                "maxLength": 100,
                "enum": [
                  "SCHEDULED",
                  "UNSCHEDULED",
                  "CANCELED"
                ]
              }
            },
            "in": "query",
            "name": "filter[statuses][]",
            "description": "Filters appointment by status, defaults to SCHEDULED."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 20,
              "maxLength": 20,
              "format": "date-time",
              "example": "2021-01-01T13:00:00Z"
            },
            "in": "query",
            "name": "filter[start_at_gte]",
            "description": "Return appointments where the start_at field is greater than or equal to this value. Effectively, appointments that start after this date."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 20,
              "maxLength": 20,
              "format": "date-time",
              "example": "2021-01-02T13:00:00Z"
            },
            "in": "query",
            "name": "filter[start_at_lte]",
            "description": "Return appointments where the start_at field is less than or equal to this value. Effectively, appointments that start before this date."
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "description": "ID of a user. UUID Version 4.",
                "type": "string",
                "minLength": 36,
                "maxLength": 36,
                "format": "uuid",
                "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
                "example": "00000000-0000-4000-8000-000000000000"
              }
            },
            "in": "query",
            "name": "filter[user_ids][]",
            "description": "The IDs of users whose appointments will be listed. UUID Version 4."
          },
          {
            "schema": {
              "type": "string",
              "example": "-created_at",
              "minLength": 1,
              "maxLength": 100
            },
            "in": "query",
            "name": "sort",
            "description": "Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to `-start_at`."
          },
          {
            "schema": {
              "type": "string",
              "example": "25",
              "minLength": 1,
              "maxLength": 5
            },
            "in": "query",
            "name": "per_page",
            "description": "The number of items per page. Defaults to 25."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 5,
              "example": "2"
            },
            "in": "query",
            "name": "page",
            "description": "The requested page. Defaults to 1."
          }
        ],
        "security": [
          {
            "Token": []
          }
        ],
        "x-external": true,
        "summary": "List appointments."
      }
    },
    "/appointments/{appointment_id}": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "appointment_id",
            "in": "path",
            "required": true,
            "description": "The ID of an appointment."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "owner,items,users,order,order.address,order.customer,order.customerGroup, order.listing,order.items,.order.items.appointment"
            },
            "in": "query",
            "name": "include",
            "description": "Comma separated list of optional data to include in the response.",
            "allowEmptyValue": true
          }
        ],
        "tags": [
          "Appointments"
        ],
        "responses": {
          "200": {
            "description": "AppointmentResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-appointments-id",
        "description": "Get appointment.",
        "security": [
          {
            "Token": []
          }
        ],
        "x-external": true,
        "summary": "Get appointment."
      },
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "appointment_id",
            "in": "path",
            "required": true,
            "description": "The ID of an appointment."
          }
        ],
        "operationId": "put-appointments-appointment_id",
        "responses": {
          "200": {
            "description": "AppointmentResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-external": true,
        "description": "Update appointment.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentUpdatePutPayload"
              }
            }
          }
        },
        "security": [
          {
            "Token": []
          }
        ],
        "tags": [
          "Appointments"
        ],
        "summary": "Update appointment."
      }
    },
    "/appointments/{appointment_id}/cancel": {
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "appointment_id",
            "in": "path",
            "required": true,
            "description": "The ID of an appointment. UUID Version 4."
          }
        ],
        "operationId": "put-appointments-appointment-id-cancel",
        "responses": {
          "200": {
            "description": "AppointmentResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "409": {
            "description": "ApiError409",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError409"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "description": "Cancel appointment. The appointments order's customer can be optionally notified of this change.",
        "x-external": true,
        "security": [
          {
            "Token": []
          }
        ],
        "tags": [
          "Appointments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentCancelPutPayload"
              }
            }
          }
        },
        "summary": "Cancel appointment."
      }
    },
    "/appointments/{appointment_id}/postpone": {
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "appointment_id",
            "in": "path",
            "required": true,
            "description": "The ID of an appointment. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Postpone appointment.",
        "operationId": "appointments-appointment-id-postpone-put",
        "tags": [
          "Appointments"
        ],
        "summary": "Postpone appointment.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/appointments/{appointment_id}/reschedule": {
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "appointment_id",
            "in": "path",
            "required": true,
            "description": "The ID of an appointment. UUID Version 4."
          }
        ],
        "operationId": "put-appointments-appointment-id-reschedule",
        "responses": {
          "200": {
            "description": "AppointmentResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "409": {
            "description": "ApiError409",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError409"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "description": "Reschedule appointment. The appointments order's customer can be optionally notified of this change.",
        "x-external": true,
        "security": [
          {
            "Token": []
          }
        ],
        "tags": [
          "Appointments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentReschedulePutPayload"
              }
            }
          }
        },
        "summary": "Reschedule appointment."
      }
    },
    "/appointments/{appointment_id}/accept": {
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "appointment_id",
            "in": "path",
            "required": true,
            "description": "The ID of an appointment. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Accept appointment.",
        "operationId": "appointments-appointment-id-accept-put",
        "tags": [
          "Appointments"
        ],
        "summary": "Accept appointment.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/appointments/{appointment_id}/decline": {
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "appointment_id",
            "in": "path",
            "required": true,
            "description": "The ID of an appointment. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Decline appointment.",
        "operationId": "appointments-appointment-id-decline-put",
        "tags": [
          "Appointments"
        ],
        "summary": "Decline appointment.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/appointments/{appointment_id}/schedule": {
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "appointment_id",
            "in": "path",
            "required": true,
            "description": "The ID of an appointment. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Schedule appointment.",
        "operationId": "appointments-appointment-id-schedule-put",
        "tags": [
          "Appointments"
        ],
        "summary": "Schedule appointment.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/appointments/{appointment_id}/availability": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "appointment_id",
            "in": "path",
            "required": true,
            "description": "The ID of an appointment. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Appointment availability.",
        "operationId": "appointments-appointment-id-availability-get",
        "tags": [
          "Appointments"
        ],
        "summary": "Appointment availability.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/appointments/{appointment_id}/3dh-tour-link": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "appointment_id",
            "in": "path",
            "required": true,
            "description": "The ID of an appointment. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Get appointment 3D Home Capture link.",
        "operationId": "appointments-appointment-id-3dh-tour-link-get",
        "tags": [
          "Appointments"
        ],
        "summary": "Get appointment 3D Home Capture link.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/appointments/store": {
      "post": {
        "responses": {
          "201": {
            "description": "201",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Create appointment.",
        "operationId": "appointments-store-post",
        "tags": [
          "Appointments"
        ],
        "summary": "Create appointment.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/billing/setup-intents": {
      "post": {
        "responses": {
          "201": {
            "description": "201",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Create billing setup intent.",
        "operationId": "billing-setup-intents-post",
        "tags": [
          "Payroll"
        ],
        "summary": "Create billing setup intent.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/blocks": {
      "post": {
        "responses": {
          "201": {
            "description": "201",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Create block.",
        "operationId": "blocks-post",
        "tags": [
          "Scheduling"
        ],
        "summary": "Create block.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/blocks/{block_id}": {
      "delete": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "block_id",
            "in": "path",
            "required": true,
            "description": "The ID of a block. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Delete block.",
        "operationId": "blocks-block-id-delete",
        "tags": [
          "Scheduling"
        ],
        "summary": "Delete block.",
        "security": [
          {
            "Token": []
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "block_id",
            "in": "path",
            "required": true,
            "description": "The ID of a block. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Get block.",
        "operationId": "blocks-block-id-get",
        "tags": [
          "Scheduling"
        ],
        "summary": "Get block.",
        "security": [
          {
            "Token": []
          }
        ]
      },
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "block_id",
            "in": "path",
            "required": true,
            "description": "The ID of a block. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Update block.",
        "operationId": "blocks-block-id-put",
        "tags": [
          "Scheduling"
        ],
        "summary": "Update block.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/command-palette/commands": {
      "get": {
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "List commands.",
        "operationId": "command-palette-commands-get",
        "tags": [
          "Tasks"
        ],
        "summary": "List commands.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/company-team-members": {
      "get": {
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "List company team members.",
        "operationId": "company-team-members-get",
        "tags": [
          "Users"
        ],
        "summary": "List company team members.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/company-team-members/{company_team_member_id}": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "company_team_member_id",
            "in": "path",
            "required": true,
            "description": "The ID of a company team member. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Get company team member.",
        "operationId": "company-team-members-company-team-member-id-get",
        "tags": [
          "Users"
        ],
        "summary": "Get company team member.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/company-team-members/{company_team_member_id}/events": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "company_team_member_id",
            "in": "path",
            "required": true,
            "description": "The ID of a company team member. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "List company team member events.",
        "operationId": "company-team-members-company-team-member-id-events-get",
        "tags": [
          "Users"
        ],
        "summary": "List company team member events.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/coupons": {
      "get": {
        "description": "List coupons.",
        "tags": [
          "Discounts"
        ],
        "responses": {
          "200": {
            "description": "CouponCollection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponCollection"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-coupons",
        "x-external": true,
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "ID of an address. UUID Version 4.",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000",
              "format": "uuid"
            },
            "in": "query",
            "name": "filter[search]",
            "description": "Return coupons that have a name matching this field."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "promotion_codes"
            },
            "in": "query",
            "name": "include",
            "description": "Comma separated list of optional data to include in the response.",
            "allowEmptyValue": true
          },
          {
            "schema": {
              "type": "string",
              "example": "-created_at",
              "minLength": 1,
              "maxLength": 100
            },
            "in": "query",
            "name": "sort",
            "description": "Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to `-created_at`."
          },
          {
            "schema": {
              "type": "string",
              "example": "25",
              "minLength": 1,
              "maxLength": 5
            },
            "in": "query",
            "name": "per_page",
            "description": "The number of items per page. Defaults to 25."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 5,
              "example": "2"
            },
            "in": "query",
            "name": "page",
            "description": "The requested page. Defaults to 1."
          }
        ],
        "security": [
          {
            "Token": []
          }
        ],
        "summary": "List coupons."
      }
    },
    "/customer-team-members/{customer_team_member_id}": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "customer_team_member_id",
            "in": "path",
            "required": true,
            "description": "The ID of a customer team member. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Get customer team member.",
        "operationId": "customer-team-members-customer-team-member-id-get",
        "tags": [
          "Users"
        ],
        "summary": "Get customer team member.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/customer-teams/{customer_team_id}/memberships": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "customer_team_id",
            "in": "path",
            "required": true,
            "description": "The ID of a customer team. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "List customer team memberships.",
        "operationId": "customer-teams-customer-team-id-memberships-get",
        "tags": [
          "Users"
        ],
        "summary": "List customer team memberships.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/customer-teams/affiliate-memberships": {
      "post": {
        "responses": {
          "201": {
            "description": "201",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Create customer team affiliate membership.",
        "operationId": "customer-teams-affiliate-memberships-post",
        "tags": [
          "Users"
        ],
        "summary": "Create customer team affiliate membership.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/customer-teams/{customer_team_id}/tags": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "customer_team_id",
            "in": "path",
            "required": true,
            "description": "The ID of a customer team. UUID Version 4."
          }
        ],
        "responses": {
          "201": {
            "description": "201",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Create customer team tag.",
        "operationId": "customer-teams-customer-team-id-tags-post",
        "tags": [
          "Tags"
        ],
        "summary": "Create customer team tag.",
        "security": [
          {
            "Token": []
          }
        ]
      },
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "customer_team_id",
            "in": "path",
            "required": true,
            "description": "The ID of a customer team. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Update customer team tag.",
        "operationId": "customer-teams-customer-team-id-tags-put",
        "tags": [
          "Tags"
        ],
        "summary": "Update customer team tag.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/customer-teams/{customer_team_id}/tags/{tag_id}": {
      "delete": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "customer_team_id",
            "in": "path",
            "required": true,
            "description": "The ID of a customer team. UUID Version 4."
          },
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "tag_id",
            "in": "path",
            "required": true,
            "description": "The ID of a tag. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Delete customer team tag.",
        "operationId": "customer-teams-customer-team-id-tags-tag-id-delete",
        "tags": [
          "Tags"
        ],
        "summary": "Delete customer team tag.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/customer-users": {
      "get": {
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "List customer users.",
        "operationId": "customer-users-get",
        "tags": [
          "Users"
        ],
        "summary": "List customer users.",
        "security": [
          {
            "Token": []
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Create customer user.",
        "operationId": "customer-users-post",
        "tags": [
          "Users"
        ],
        "summary": "Create customer user.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/customer-users/{user}/credit-transactions": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "user",
            "in": "path",
            "required": true,
            "description": "The ID of a user. UUID Version 4."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "credit",
                      "debit"
                    ],
                    "minLength": 5,
                    "maxLength": 6,
                    "description": "The type of transaction",
                    "example": "credit"
                  },
                  "amount": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "The amount in cents",
                    "example": 100
                  },
                  "description": {
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 255,
                    "description": "Optional description of the transaction",
                    "example": "Description of transaction"
                  },
                  "date": {
                    "type": "string",
                    "format": "date",
                    "minLength": 10,
                    "maxLength": 10,
                    "description": "The date for the transaction in UTC (YYYY-MM-DD)",
                    "example": "2025-01-01"
                  }
                },
                "required": [
                  "type",
                  "amount"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Credit transaction created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditTransactionResource"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-external": true,
        "description": "Store customer user credit transaction.",
        "operationId": "customer-users-user-credit-transactions-store-post",
        "tags": [
          "Users"
        ],
        "summary": "Store customer user credit transaction.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/customers": {
      "get": {
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "List customers.",
        "operationId": "customers-get",
        "tags": [
          "Users"
        ],
        "summary": "List customers.",
        "security": [
          {
            "Token": []
          }
        ]
      },
      "post": {
        "responses": {
          "201": {
            "description": "201",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Create a customer.",
        "operationId": "customers-post",
        "tags": [
          "Users"
        ],
        "summary": "Create a customer.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/discounts": {
      "post": {
        "responses": {
          "201": {
            "description": "DiscountResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "post-discounts",
        "description": "Create discount.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscountPostPayload"
              }
            }
          },
          "description": "DiscountPostPayload"
        },
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [],
        "x-external": true,
        "tags": [
          "Discounts"
        ],
        "summary": "Create discount."
      }
    },
    "/discounts/{discount_id}": {
      "delete": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "discount_id",
            "in": "path",
            "required": true,
            "description": "The ID of a discount. UUID Version 4."
          }
        ],
        "operationId": "delete-discounts-discount-id",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "description": "Delete discount.",
        "x-external": true,
        "security": [
          {
            "Token": []
          }
        ],
        "tags": [
          "Discounts"
        ],
        "summary": "Delete discount."
      }
    },
    "/interactive-contents/url-check": {
      "post": {
        "responses": {
          "201": {
            "description": "201",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Check interactive contents URL.",
        "operationId": "interactive-contents-url-check-post",
        "tags": [
          "Orders"
        ],
        "summary": "Check interactive contents URL.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/listings": {
      "get": {
        "x-external": true,
        "tags": [
          "Listings"
        ],
        "responses": {
          "200": {
            "description": "ListingCollection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingCollection"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-listings",
        "description": "Lists all listings available to a group.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "list_agent,list_agent.social_profiles,list_agent.owner,co_list_agent,co_list_agent.social_profiles,co_list_agent.owner,images,videos,floor_plans,interactive_content,property_website"
            },
            "in": "query",
            "name": "include",
            "description": "Comma separated list of optional data to include in the response.",
            "allowEmptyValue": true
          },
          {
            "schema": {
              "type": "string",
              "example": "123 Main St",
              "minLength": 1,
              "maxLength": 255
            },
            "in": "query",
            "name": "filter[search]",
            "description": "Return listings that have fields matching this term."
          },
          {
            "schema": {
              "type": "string",
              "example": "123 Main St",
              "minLength": 1,
              "maxLength": 255
            },
            "in": "query",
            "name": "filter[address]",
            "description": "Return listings that have an address matching this term."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255,
              "example": "John Doe"
            },
            "in": "query",
            "name": "filter[list_agent]",
            "description": "Return listings that have a listing agent or co-listing agent matching this term."
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "COMING_SOON",
                "FOR_LEASE",
                "FOR_SALE",
                "PENDING_SALE",
                "PENDING_LEASE",
                "SOLD",
                "LEASED",
                "OFF_MARKET",
                "null"
              ],
              "example": "FOR_SALE",
              "minLength": 1,
              "maxLength": 100
            },
            "in": "query",
            "name": "filter[status]",
            "description": "Return listings that have a certain status."
          },
          {
            "schema": {
              "type": "boolean",
              "example": true
            },
            "in": "query",
            "name": "filter[active]",
            "description": "Set as true to return listings that have an active status (e.g. active statuses include `COMING_SOON`, `FOR_SALE`, `FOR_LEASE`, `PENDING_SALE`, `PENDING_LEASE`, `SOLD`, `LEASED`)."
          },
          {
            "schema": {
              "type": "number",
              "example": 100000
            },
            "in": "query",
            "name": "filter[price_gte]",
            "description": "Return listings where the price field is greater than or equal to this value."
          },
          {
            "schema": {
              "type": "number",
              "example": 4000000
            },
            "in": "query",
            "name": "filter[price_lte]",
            "description": "Return listings where the price field is less than or equal to this value."
          },
          {
            "schema": {
              "type": "number",
              "example": 1000
            },
            "in": "query",
            "name": "filter[square_feet_gte]",
            "description": "Return listings where the square feet field is greater than or equal to this value."
          },
          {
            "schema": {
              "type": "number",
              "example": 5000
            },
            "in": "query",
            "name": "filter[square_feet_lte]",
            "description": "Return listings where the square feet field is less than or equal to this value."
          },
          {
            "schema": {
              "type": "integer",
              "example": 2
            },
            "in": "query",
            "name": "filter[bedrooms_gte]",
            "description": "Return listings where the bedrooms field is greater than or equal to this value."
          },
          {
            "schema": {
              "type": "integer",
              "example": 4
            },
            "in": "query",
            "name": "filter[bedrooms_lte]",
            "description": "Return listings where the bedrooms field is less than or equal to this value."
          },
          {
            "schema": {
              "type": "number",
              "example": 2.5
            },
            "in": "query",
            "name": "filter[bathrooms_gte]",
            "description": "Return listings where the bathrooms field is greater than or equal to this value."
          },
          {
            "schema": {
              "type": "number",
              "example": 5
            },
            "in": "query",
            "name": "filter[bathrooms_lte]",
            "description": "Return listings where the bathrooms field is less than or equal to this value."
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "DELIVERED",
                "UNDELIVERED",
                "SCHEDULED",
                "null"
              ],
              "example": "DELIVERED",
              "minLength": 0,
              "maxLength": 11
            },
            "in": "query",
            "name": "filter[delivery_status]",
            "description": "Return listings where the delivery status is equal to this value."
          },
          {
            "schema": {
              "type": "boolean",
              "example": true
            },
            "in": "query",
            "name": "filter[showcase]",
            "description": "Return listings associated with a Showcase media request."
          },
          {
            "schema": {
              "type": "string",
              "example": "-created_at",
              "minLength": 1,
              "maxLength": 100
            },
            "in": "query",
            "name": "sort",
            "description": "Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to `-created_at`."
          },
          {
            "schema": {
              "type": "string",
              "example": "25",
              "minLength": 1,
              "maxLength": 5
            },
            "in": "query",
            "name": "per_page",
            "description": "The number of items per page. Defaults to 25."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 5,
              "example": "2"
            },
            "in": "query",
            "name": "page",
            "description": "The requested page. Defaults to 1."
          }
        ],
        "security": [
          {
            "Token": []
          }
        ],
        "summary": "List listings."
      },
      "post": {
        "operationId": "post-listings",
        "x-external": true,
        "responses": {
          "201": {
            "description": "ListingResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "409": {
            "description": "ApiError409",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError409"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "description": "Create listing.",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListingPostPayload"
              }
            }
          },
          "description": "ListingPostPayload"
        },
        "tags": [
          "Listings"
        ],
        "summary": "Create listing."
      }
    },
    "/listings/{listing_id}": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "listing_id",
            "in": "path",
            "required": true,
            "description": "The ID of a listing. UUID Version 4."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "list_agent,list_agent.social_profiles,list_agent.owner,co_list_agent,co_list_agent.social_profiles,co_list_agent.owner,images,videos,floor_plans,interactive_content,property_website,orders.appointments"
            },
            "in": "query",
            "name": "include",
            "description": "Comma separated list of optional data to include in the response.",
            "allowEmptyValue": true
          }
        ],
        "x-external": true,
        "tags": [
          "Listings"
        ],
        "responses": {
          "200": {
            "description": "ListingResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-listings-id",
        "description": "Get listing.",
        "security": [
          {
            "Token": []
          }
        ],
        "summary": "Get listing."
      },
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "listing_id",
            "in": "path",
            "required": true,
            "description": "The ID of a listing. UUID Version 4."
          }
        ],
        "x-external": true,
        "tags": [
          "Listings"
        ],
        "operationId": "update-listings",
        "responses": {
          "200": {
            "description": "ListingResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "409": {
            "description": "ApiError409",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError409"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "description": "Update listing.",
        "security": [
          {
            "Token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListingPutPayload"
              }
            }
          },
          "description": "ListingPutPayload"
        },
        "summary": "Update listing."
      }
    },
    "/listings/{listing_id}/cubi-casa": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "listing_id",
            "in": "path",
            "required": true,
            "description": "The ID of a listing. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Get listing Cubicasa information.",
        "operationId": "listings-listing-id-cubi-casa-get",
        "tags": [
          "Listings"
        ],
        "summary": "Get listing Cubicasa information.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/listings/{listing_id}/details/search": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "listing_id",
            "in": "path",
            "required": true,
            "description": "The ID of a listing. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Search listing details.",
        "operationId": "listings-listing-id-details-search-get",
        "tags": [
          "Listings"
        ],
        "summary": "Search listing details.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/listings/{listing_id}/stats": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "listing_id",
            "in": "path",
            "required": true,
            "description": "The ID of a listing. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Get listing statistics.",
        "operationId": "listings-listing-id-stats-get",
        "tags": [
          "Listings"
        ],
        "summary": "Get listing statistics.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/orders": {
      "get": {
        "x-external": true,
        "responses": {
          "200": {
            "description": "OrderCollection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCollection"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-orders",
        "description": "Lists all orders of a group.",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "items,listing,customer,appointments,appointments.users,unconfirmed_appointments,order_form,discounts,discounts.coupon"
            },
            "in": "query",
            "name": "include",
            "description": "Comma separated list of optional data to include in the response.",
            "allowEmptyValue": true
          },
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "123 Imperial"
            },
            "in": "query",
            "name": "filter[search]",
            "description": "Return orders with addresses or customers that match on this string."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "PAID"
            },
            "in": "query",
            "name": "filter[payment_status]",
            "description": "Return orders with the specified payment status. Available payment statuses are PAID, PARTIALLY_PAID, and UNPAID."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "123 Imperial"
            },
            "in": "query",
            "name": "filter[fulfillment_status]",
            "description": "Return orders with the specified fulfillment status. Available fulfillment statuses are FULFILLED, PARTIALLY_FULFILLED, and UNFULFILLED."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 20,
              "maxLength": 20,
              "format": "date-time",
              "example": "2021-01-01T13:00:00Z"
            },
            "in": "query",
            "name": "filter[appointment_start_at_gte]",
            "description": "Return orders with an appointment starting after this date."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 20,
              "maxLength": 20,
              "format": "date-time",
              "example": "2021-01-01T13:00:00Z"
            },
            "in": "query",
            "name": "filter[appointment_start_at_lte]",
            "description": "Return orders with an appointment starting before this date."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 100,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "in": "query",
            "name": "filter[creator_group_id]",
            "description": "Creator group ID used to list orders owned by a specific creator."
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "description": "ID of a tag. UUID Version 4.",
                "type": "string",
                "minLength": 36,
                "maxLength": 36,
                "format": "uuid",
                "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
                "example": "00000000-0000-4000-8000-000000000000"
              }
            },
            "in": "query",
            "name": "filter[tag_ids][]",
            "description": "Set to include orders with tags that match any of the tags provided."
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "description": "ID of a user. UUID Version 4.",
                "type": "string",
                "minLength": 36,
                "maxLength": 36,
                "format": "uuid",
                "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
                "example": "00000000-0000-4000-8000-000000000000"
              }
            },
            "in": "query",
            "name": "filter[user_ids][]",
            "description": "Set to include orders that have appointments with the given users."
          },
          {
            "schema": {
              "type": "string",
              "example": "appointment_start",
              "minLength": 1,
              "maxLength": 100
            },
            "in": "query",
            "name": "sort",
            "description": "Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to `-created_at`."
          },
          {
            "schema": {
              "type": "string",
              "example": "25",
              "minLength": 1,
              "maxLength": 5
            },
            "in": "query",
            "name": "per_page",
            "description": "The number of items per page. Defaults to 25."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 5,
              "example": "2"
            },
            "in": "query",
            "name": "page",
            "description": "The requested page. Defaults to 1."
          }
        ],
        "tags": [
          "Orders"
        ],
        "summary": "List orders."
      },
      "post": {
        "x-external": true,
        "operationId": "post-orders",
        "responses": {
          "201": {
            "description": "OrderResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "409": {
            "description": "ApiError409",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError409"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "description": "Create order.",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderPostPayload"
              }
            }
          },
          "description": "OrderPostPayload"
        },
        "summary": "Create order."
      }
    },
    "/orders/{order_id}": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "order_id",
            "in": "path",
            "required": true,
            "description": "The ID of an order. UUID Version 4."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "items,listing,customer,appointments,appointments.users,unconfirmed_appointments,order_form,discounts,discounts.coupon"
            },
            "in": "query",
            "name": "include",
            "description": "Comma separated list of optional data to include in the response.",
            "allowEmptyValue": true
          }
        ],
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "OrderResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-orders-id",
        "x-external": true,
        "description": "Get order.",
        "security": [
          {
            "Token": []
          }
        ],
        "summary": "Get order."
      }
    },
    "/orders/{order_id}/notes": {
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "order_id",
            "in": "path",
            "required": true,
            "description": "The ID of an order. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Update order notes.",
        "operationId": "orders-order-id-notes-put",
        "tags": [
          "Notes"
        ],
        "summary": "Update order notes.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/orders/{order}/payments": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "order",
            "in": "path",
            "required": true,
            "description": "The ID of an order. UUID Version 4."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "The amount in cents",
                    "example": 500
                  },
                  "tip_amount": {
                    "type": "integer",
                    "description": "The tip amount in cents",
                    "example": 100,
                    "minimum": 0
                  },
                  "collection_source": {
                    "type": "string",
                    "enum": [
                      "PAYPAL",
                      "VENMO",
                      "STRIPE",
                      "SQUARE",
                      "QUICKBOOKS",
                      "CONCIERGE",
                      "CASH",
                      "CHECK",
                      "OTHER"
                    ],
                    "minLength": 5,
                    "maxLength": 10,
                    "description": "The source of the payment",
                    "example": "CASH"
                  },
                  "date": {
                    "type": "string",
                    "format": "date",
                    "minLength": 10,
                    "maxLength": 10,
                    "description": "The date for the payment in UTC (YYYY-MM-DD)",
                    "example": "2025-01-01"
                  },
                  "notes": {
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 10000,
                    "description": "Optional description of the payment",
                    "example": "Description of payment"
                  }
                },
                "required": [
                  "amount",
                  "currency",
                  "collection_source",
                  "date"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResource"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": false,
        "x-external": true,
        "description": "Create a manual order payment.",
        "operationId": "orders-order-payments-post",
        "tags": [
          "Payments",
          "Orders"
        ],
        "summary": "Create a manual order payment.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/orders/{order_id}/tags": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "order_id",
            "in": "path",
            "required": true,
            "description": "The ID of an order. UUID Version 4."
          }
        ],
        "responses": {
          "201": {
            "description": "201",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Create tag for order.",
        "operationId": "orders-order-id-tags-post",
        "tags": [
          "Tags"
        ],
        "summary": "Create tag for order.",
        "security": [
          {
            "Token": []
          }
        ]
      },
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "order_id",
            "in": "path",
            "required": true,
            "description": "The ID of an order. UUID Version 4."
          }
        ],
        "x-external": true,
        "tags": [
          "Tags"
        ],
        "responses": {
          "200": {
            "description": "OrderResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "put-order-tags-tag-id",
        "description": "Update tag for order.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderTagsPutPayload"
              }
            }
          },
          "description": "OrderTagsPutPayload"
        },
        "security": [
          {
            "Token": []
          }
        ],
        "summary": "Update tag for order."
      }
    },
    "/orders/{order_id}/tags/{tag_id}": {
      "delete": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "order_id",
            "in": "path",
            "required": true,
            "description": "The ID of an order. UUID Version 4."
          },
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "tag_id",
            "in": "path",
            "required": true,
            "description": "The ID of a tag. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Delete tag for order.",
        "operationId": "orders-order-id-tags-tag-id-delete",
        "tags": [
          "Tags"
        ],
        "summary": "Delete tag for order.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/orders/{order}/billing-address": {
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "order",
            "in": "path",
            "required": true,
            "description": "The ID of an order. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Update order billing address.",
        "operationId": "orders-order-billing-address-put",
        "tags": [
          "Orders"
        ],
        "summary": "Update order billing address.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/orders/{order}/discounts/{discount}": {
      "delete": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "order",
            "in": "path",
            "required": true,
            "description": "The ID of an order. UUID Version 4."
          },
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "discount",
            "in": "path",
            "required": true,
            "description": "The ID of a discount. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Delete order discount.",
        "operationId": "orders-order-discounts-discount-delete",
        "tags": [
          "Discounts"
        ],
        "summary": "Delete order discount.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/orders/{order}/payment-info": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "order",
            "in": "path",
            "required": true,
            "description": "The ID of an order. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Get payment information an order.",
        "operationId": "orders-order-payment-info-get",
        "tags": [
          "Orders"
        ],
        "summary": "Get payment information an order.",
        "security": []
      }
    },
    "/order-form-sessions": {
      "post": {
        "operationId": "post-order-form-sessions",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderFormSessionResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "tags": [
          "Order Forms"
        ],
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [],
        "description": "Create order form session",
        "x-external": true,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderFormSessionPostPayload"
              }
            }
          }
        },
        "summary": "Create order form session."
      }
    },
    "/order-forms": {
      "get": {
        "responses": {
          "200": {
            "description": "OrderFormCollection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderFormCollection"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-order-forms",
        "x-external": true,
        "description": "Lists all order forms for the current group.",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [],
        "tags": [
          "Order Forms"
        ],
        "summary": "List order forms."
      }
    },
    "/order-items": {
      "post": {
        "operationId": "post-order-items",
        "responses": {
          "201": {
            "description": "OrderItemResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItemResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "409": {
            "description": "ApiError409",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError409"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "description": "Create order item.",
        "x-external": true,
        "tags": [
          "Order Items"
        ],
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderItemPostPayload"
              }
            }
          },
          "description": "OrderPostPayload"
        },
        "summary": "Create order item."
      }
    },
    "/order-items/{order_item_id}": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "format": "uuid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "order_item_id",
            "in": "path",
            "required": true,
            "description": "The ID of an order item. UUID Version 4."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "resource"
            },
            "in": "query",
            "name": "include",
            "description": "Comma separated list of optional data to include in the response."
          }
        ],
        "tags": [
          "Order Items"
        ],
        "responses": {
          "200": {
            "description": "OrderItemResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItemResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-order-items-order-item-id",
        "x-external": true,
        "description": "Get order item.",
        "summary": "Get order item.",
        "security": [
          {
            "Token": []
          }
        ]
      },
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "format": "uuid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "order_item_id",
            "in": "path",
            "required": true,
            "description": "The ID of an order item. UUID Version 4."
          }
        ],
        "x-external": true,
        "tags": [
          "Order Items"
        ],
        "operationId": "put-order-items-order-item-id",
        "responses": {
          "200": {
            "description": "OrderItemResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItemResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "description": "Update order item.",
        "summary": "Update order item.",
        "security": [
          {
            "Token": []
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "format": "uuid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "order_item_id",
            "in": "path",
            "required": true,
            "description": "The ID of an order item. UUID Version 4."
          }
        ],
        "tags": [
          "Order Items"
        ],
        "operationId": "delete-order-items-order-item-id",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-external": true,
        "description": "Delete order item.",
        "summary": "Delete order item.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/order-items/{order_item_id}/pay-run-item-defaults": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "order_item_id",
            "in": "path",
            "required": true,
            "description": "The ID of an order item. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "List order item pay run item defaults.",
        "operationId": "order-items-order-item-id-pay-run-item-defaults-get",
        "tags": [
          "Payroll"
        ],
        "summary": "List order item pay run item defaults.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/payroll/pay-run-items": {
      "get": {
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "List payroll pay run items.",
        "operationId": "payroll-pay-run-items-get",
        "tags": [
          "Payroll"
        ],
        "summary": "List payroll pay run items.",
        "security": [
          {
            "Token": []
          }
        ]
      },
      "post": {
        "responses": {
          "201": {
            "description": "201",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Create payroll pay run item.",
        "operationId": "payroll-pay-run-items-post",
        "tags": [
          "Payroll"
        ],
        "summary": "Create payroll pay run item.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/payroll/pay-run-items/{pay_run_item}": {
      "delete": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "pay_run_item",
            "in": "path",
            "required": true,
            "description": "The ID of a pay run item. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Delete payroll pay run item.",
        "operationId": "payroll-pay-run-items-pay-run-item-delete",
        "tags": [
          "Payroll"
        ],
        "summary": "Delete payroll pay run item.",
        "security": [
          {
            "Token": []
          }
        ]
      },
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "pay_run_item",
            "in": "path",
            "required": true,
            "description": "The ID of a pay run item. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Update payroll pay run item.",
        "operationId": "payroll-pay-run-items-pay-run-item-put",
        "tags": [
          "Payroll"
        ],
        "summary": "Update payroll pay run item.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/payroll/pay-runs/{pay_run}/items/add": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "pay_run",
            "in": "path",
            "required": true,
            "description": "The ID of a pay run. UUID Version 4."
          }
        ],
        "responses": {
          "201": {
            "description": "201",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Add pay run item to pay run.",
        "operationId": "payroll-pay-runs-pay-run-items-add-post",
        "tags": [
          "Payroll"
        ],
        "summary": "Add pay run item to pay run.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/payroll/pay-runs/{pay_run}/items/remove": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "pay_run",
            "in": "path",
            "required": true,
            "description": "The ID of a pay run. UUID Version 4."
          }
        ],
        "responses": {
          "201": {
            "description": "201",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Remove pay run item from pay run.",
        "operationId": "payroll-pay-runs-pay-run-items-remove-post",
        "tags": [
          "Payroll"
        ],
        "summary": "Remove pay run item from pay run.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/products": {
      "get": {
        "responses": {
          "200": {
            "description": "ProductCollection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCollection"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-products",
        "x-external": true,
        "description": "List products.",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "-created_at",
              "minLength": 1,
              "maxLength": 100
            },
            "in": "query",
            "name": "sort",
            "description": "Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to `title`."
          },
          {
            "schema": {
              "type": "string",
              "example": "25",
              "minLength": 1,
              "maxLength": 5
            },
            "in": "query",
            "name": "per_page",
            "description": "The number of items per page. Defaults to 25."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 5,
              "example": "2"
            },
            "in": "query",
            "name": "page",
            "description": "The requested page. Defaults to 1."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "Photography"
            },
            "in": "query",
            "name": "filter[search]",
            "description": "Return products that have fields matching this term."
          },
          {
            "schema": {
              "type": "boolean",
              "example": true
            },
            "in": "query",
            "name": "filter[include_inactive]",
            "description": "Include inactive products (in addition to active products) when returning products."
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "description": "ID of a category. UUID Version 4.",
                "type": "string",
                "minLength": 36,
                "maxLength": 36,
                "format": "uuid",
                "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
                "example": "00000000-0000-4000-8000-000000000000"
              }
            },
            "in": "query",
            "name": "filter[category_ids][]",
            "description": "Return products in the given categories."
          },
          {
            "schema": {
              "type": "string",
              "example": "MAIN",
              "minLength": 0,
              "maxLength": 255
            },
            "in": "query",
            "name": "filter[type]",
            "description": "Return products matching the given type. Allowed values are: MAIN, ADDON."
          }
        ],
        "tags": [
          "Products"
        ],
        "summary": "List products."
      }
    },
    "/products/{product_id}/tags": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "product_id",
            "in": "path",
            "required": true,
            "description": "The ID of a product. UUID Version 4."
          }
        ],
        "responses": {
          "201": {
            "description": "201",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Create tag.",
        "operationId": "post-products-product-id-tags",
        "tags": [
          "Tags"
        ],
        "summary": "Create tag.",
        "security": [
          {
            "Token": []
          }
        ]
      },
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "product_id",
            "in": "path",
            "required": true,
            "description": "The ID of a product. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Update product tag.",
        "operationId": "put-products-product-id-tags",
        "tags": [
          "Tags"
        ],
        "summary": "Update product tag.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/products/{product_id}/tags/{tag_id}": {
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "product_id",
            "in": "path",
            "required": true,
            "description": "The ID of a product. UUID Version 4."
          },
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "tag_id",
            "in": "path",
            "required": true,
            "description": "The ID of a tag."
          }
        ],
        "x-external": true,
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "description": "Update tag.",
        "operationId": "put-products-product-id-tags-tag-id",
        "tags": [
          "Tags"
        ],
        "summary": "Update tag.",
        "security": [
          {
            "Token": []
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "product_id",
            "in": "path",
            "required": true,
            "description": "The ID of a product. UUID Version 4."
          },
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "tag_id",
            "in": "path",
            "required": true,
            "description": "The ID of a tag."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Delete product tag.",
        "operationId": "delete-products-product-id-tags-tag-id",
        "tags": [
          "Tags"
        ],
        "summary": "Delete product tag.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/product-categories": {
      "get": {
        "responses": {
          "200": {
            "description": "ProductCategoryCollection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCategoryCollection"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-product-categories",
        "x-external": true,
        "description": "List product categories.",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "-created_at",
              "minLength": 1,
              "maxLength": 100
            },
            "in": "query",
            "name": "sort",
            "description": "Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to `title`."
          },
          {
            "schema": {
              "type": "string",
              "example": "25",
              "minLength": 1,
              "maxLength": 5
            },
            "in": "query",
            "name": "per_page",
            "description": "The number of items per page. Defaults to 25."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 5,
              "example": "2"
            },
            "in": "query",
            "name": "page",
            "description": "The requested page. Defaults to 1."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "Photography"
            },
            "in": "query",
            "name": "filter[search]",
            "description": "Return product categories that have fields matching this term."
          }
        ],
        "tags": [
          "Products"
        ],
        "summary": "List product categories."
      }
    },
    "/promotion-codes/redeem/{discountedType}/{discounted}": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255,
              "enum": [
                "product",
                "fee"
              ],
              "example": "product"
            },
            "name": "discountedType",
            "in": "path",
            "required": true,
            "description": "The type of discountable."
          },
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "discounted",
            "in": "path",
            "required": true,
            "description": "The ID of a discountable. UUID Version 4."
          }
        ],
        "responses": {
          "201": {
            "description": "201",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Redeem promotion code.",
        "operationId": "promotion-codes-redeem-discountedType-discounted-post",
        "tags": [
          "Discounts"
        ],
        "summary": "Redeem promotion code.",
        "security": []
      }
    },
    "/refunds/{orderPayment}": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "orderPayment",
            "in": "path",
            "required": true,
            "description": "The ID of an order payment. UUID Version 4."
          }
        ],
        "responses": {
          "201": {
            "description": "201",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Refund order payment.",
        "operationId": "refunds-orderPayment-post",
        "tags": [
          "Discounts"
        ],
        "summary": "Refund order payment.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/regions": {
      "get": {
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "List regions.",
        "operationId": "regions-get",
        "tags": [
          "Scheduling"
        ],
        "summary": "List regions.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/scheduling/assignment": {
      "get": {
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Get scheduling assignment.",
        "operationId": "scheduling-assignment-get",
        "tags": [
          "Scheduling"
        ],
        "summary": "Get scheduling assignment.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/scheduling/available-dates": {
      "get": {
        "tags": [
          "Scheduling"
        ],
        "responses": {
          "200": {
            "description": "CalendarDayCollection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDayCollection"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-available-dates",
        "description": "List available dates. Availability can be listed using a specific start & end date range, or using a timeframe. When using a timeframe, the page parameter can be used to flip through weeks, months, etc.",
        "parameters": [
          {
            "schema": {
              "type": "array",
              "items": {
                "description": "ID of a user. UUID Version 4.",
                "type": "string",
                "minLength": 36,
                "maxLength": 36,
                "format": "uuid",
                "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
                "example": "00000000-0000-4000-8000-000000000000"
              }
            },
            "in": "query",
            "name": "filter[user_ids][]",
            "description": "The IDs of users whose availability will be listed. UUID Version 4."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "in": "query",
            "name": "filter[appointment_id]",
            "description": "Appointment ID used to list availability for an existing order"
          },
          {
            "schema": {
              "type": "string",
              "minLength": 20,
              "maxLength": 20,
              "format": "date-time",
              "example": "2021-01-01T13:00:00Z"
            },
            "in": "query",
            "name": "filter[start_at]",
            "description": "Returns availability after start_at"
          },
          {
            "schema": {
              "type": "string",
              "minLength": 20,
              "maxLength": 20,
              "format": "date-time",
              "example": "2021-01-02T13:00:00Z"
            },
            "in": "query",
            "name": "filter[end_at]",
            "description": "Returns availability before end_at"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "DAY",
                "WEEK",
                "MONTH",
                "YEAR"
              ],
              "minLength": 1,
              "maxLength": 5,
              "example": "MONTH"
            },
            "in": "query",
            "name": "filter[timeframe]",
            "description": "Returns availability for a specific timeframe. Used instead of start_at & end_at"
          },
          {
            "schema": {
              "type": "integer",
              "example": 60,
              "minimum": 1,
              "maximum": 360
            },
            "in": "query",
            "name": "duration",
            "description": "Duration of the event to schedule. Required if appointment_id isn't specified"
          },
          {
            "schema": {
              "type": "integer",
              "example": 15,
              "minimum": 1,
              "maximum": 360
            },
            "in": "query",
            "name": "interval",
            "description": "Interval of bookable timeslots starting at x minutes on the hour . Required if appointment_id isn't specified"
          },
          {
            "schema": {
              "type": "string",
              "example": "CST",
              "minLength": 3,
              "maxLength": 50
            },
            "in": "query",
            "name": "timezone",
            "description": "The timezone of the client. Available dates results will be localized to this timezone",
            "required": true
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "example": 1
            },
            "in": "query",
            "name": "page",
            "description": "The requested page of results. Use this parameter to flip through pages when using the timeframe filter"
          },
          {
            "schema": {
              "type": "integer",
              "example": 5
            },
            "in": "query",
            "name": "per_page",
            "description": "The number of results per page. Only applies when using a date range"
          }
        ],
        "security": [
          {
            "Token": []
          }
        ],
        "x-external": true,
        "summary": "List available dates."
      }
    },
    "/scheduling/available-timeslots": {
      "get": {
        "responses": {
          "200": {
            "description": "TimeslotCollection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeslotCollection"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-available-timeslots",
        "description": "List available timeslots. Timeslots are returned for the entire day in the local timezone. \n\nResults are returned in UTC!",
        "parameters": [
          {
            "schema": {
              "type": "array",
              "items": {
                "description": "ID of a user. UUID Version 4.",
                "type": "string",
                "minLength": 36,
                "maxLength": 36,
                "format": "uuid",
                "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
                "example": "00000000-0000-4000-8000-000000000000"
              }
            },
            "in": "query",
            "name": "filter[user_ids][]",
            "description": "The IDs of users whose appointments will be listed. UUID Version 4."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "in": "query",
            "name": "filter[appointment_id]",
            "description": "Appointment ID used to list availability for an existing order"
          },
          {
            "schema": {
              "type": "integer",
              "example": 60,
              "minimum": 1,
              "maximum": 360
            },
            "in": "query",
            "name": "duration",
            "description": "Duration of the event to schedule. Required if appointment_id isn't specified"
          },
          {
            "schema": {
              "type": "integer",
              "example": 25,
              "minimum": 1,
              "maximum": 360
            },
            "in": "query",
            "name": "interval",
            "description": "Interval of bookable timeslots starting at x minutes on the hour . Required if appointment_id isn't specified"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "example": 1
            },
            "in": "query",
            "name": "page",
            "description": "The requested page of results"
          },
          {
            "schema": {
              "type": "integer",
              "example": 5,
              "minimum": 1
            },
            "in": "query",
            "name": "per_page",
            "description": "The number of results per page. Only applies when using a date range"
          },
          {
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-01-01",
              "minLength": 10,
              "maxLength": 10
            },
            "in": "query",
            "name": "date",
            "description": "The date to list available timeslots",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "example": "CST",
              "minLength": 3,
              "maxLength": 50
            },
            "in": "query",
            "name": "timezone",
            "description": "The timezone is used to determine the start and end time of the specified date to list a full day of results.",
            "required": true
          }
        ],
        "security": [
          {
            "Token": []
          }
        ],
        "x-external": true,
        "tags": [
          "Scheduling"
        ],
        "summary": "List available timeslots."
      }
    },
    "/scheduling/item-groupings": {
      "get": {
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "List schedule item groupings.",
        "operationId": "scheduling-item-groupings-get",
        "tags": [
          "Scheduling"
        ],
        "summary": "List schedule item groupings.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/tags": {
      "post": {
        "responses": {
          "201": {
            "description": "201",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Create tag.",
        "operationId": "tags-post",
        "tags": [
          "Tags"
        ],
        "summary": "Create tag.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/tags/{tag_id}": {
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "tag_id",
            "in": "path",
            "required": true,
            "description": "The ID of a tag."
          }
        ],
        "x-external": true,
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "description": "Update tag.",
        "operationId": "tags-tag-id-put",
        "tags": [
          "Tags"
        ],
        "summary": "Update tag.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/tasks": {
      "get": {
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "List tasks.",
        "operationId": "tasks-get",
        "tags": [
          "Tasks"
        ],
        "summary": "List tasks.",
        "security": [
          {
            "Token": []
          }
        ]
      },
      "post": {
        "responses": {
          "201": {
            "description": "201",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Create task.",
        "operationId": "tasks-post",
        "tags": [
          "Tasks"
        ],
        "summary": "Create task.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/tasks/{task_id}": {
      "delete": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "task_id",
            "in": "path",
            "required": true,
            "description": "The ID of a task. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Delete task.",
        "operationId": "tasks-task-id-delete",
        "tags": [
          "Tasks"
        ],
        "summary": "Delete task.",
        "security": [
          {
            "Token": []
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "task_id",
            "in": "path",
            "required": true,
            "description": "The ID of a task. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Get task.",
        "operationId": "tasks-task-id-get",
        "tags": [
          "Tasks"
        ],
        "summary": "Get task.",
        "security": [
          {
            "Token": []
          }
        ]
      },
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "task_id",
            "in": "path",
            "required": true,
            "description": "The ID of a task. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Update task.",
        "operationId": "tasks-task-id-put",
        "tags": [
          "Tasks"
        ],
        "summary": "Update task.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/tasks/{task_id}/complete": {
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "task_id",
            "in": "path",
            "required": true,
            "description": "The ID of a task. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Complete task.",
        "operationId": "tasks-task-id-complete-put",
        "tags": [
          "Tasks"
        ],
        "summary": "Complete task.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/tasks/{task_id}/reinstate": {
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "task_id",
            "in": "path",
            "required": true,
            "description": "The ID of a task. UUID Version 4."
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-undocumented": true,
        "x-external": true,
        "description": "Reinstate task.",
        "operationId": "tasks-task-id-reinstate-put",
        "tags": [
          "Tasks"
        ],
        "summary": "Reinstate task.",
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/taxes": {
      "post": {
        "responses": {
          "201": {
            "description": "TaxResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "post-taxes",
        "description": "Create tax.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxPostPayload"
              }
            }
          },
          "description": "TaxPostPayload"
        },
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [],
        "x-external": true,
        "tags": [
          "Products"
        ],
        "summary": "Create tax."
      }
    },
    "/taxes/{tax_id}": {
      "delete": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "tax_id",
            "in": "path",
            "required": true,
            "description": "The ID of a tax. UUID Version 4."
          }
        ],
        "operationId": "delete-taxes-tax-id",
        "x-external": true,
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "description": "Delete tax.",
        "security": [
          {
            "Token": []
          }
        ],
        "tags": [
          "Products"
        ],
        "summary": "Delete tax."
      }
    },
    "/territories": {
      "get": {
        "x-external": true,
        "tags": [
          "Products"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TerritoryCollection"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-territories",
        "description": "List territories.",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "ID of an address. UUID Version 4.",
              "minLength": 36,
              "maxLength": 36,
              "format": "uuid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "in": "query",
            "name": "filter[address_id]",
            "description": "An address ID. When set, only territories that contain this address within their bounds are returned."
          }
        ],
        "summary": "List territories."
      }
    },
    "/videos/{video_id}": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "video_id",
            "in": "path",
            "required": true,
            "description": "The ID of a video. UUID Version 4."
          }
        ],
        "x-external": true,
        "tags": [
          "Videos"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-videos-video-id",
        "description": "Get video.",
        "security": [
          {
            "Token": []
          }
        ],
        "summary": "Get video."
      },
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "video_id",
            "in": "path",
            "required": true,
            "description": "The ID of a video. UUID Version 4."
          }
        ],
        "operationId": "put-videos-video-id",
        "x-external": true,
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "description": "Update video.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoPutPayload"
              }
            }
          }
        },
        "security": [
          {
            "Token": []
          }
        ],
        "tags": [
          "Videos"
        ],
        "summary": "Update video."
      },
      "delete": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "name": "video_id",
            "in": "path",
            "required": true,
            "description": "The ID of a video. UUID Version 4."
          }
        ],
        "operationId": "delete-videos-video-id",
        "x-external": true,
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "description": "Delete video.",
        "security": [
          {
            "Token": []
          }
        ],
        "tags": [
          "Videos"
        ],
        "summary": "Delete video."
      }
    }
  },
  "components": {
    "securitySchemes": {
      "Token": {
        "description": "A personal access token (token) identifying a user, and sometimes, the user's current group. Tokens may be generated in a group's developer settings. The token should be supplied in the authorization header: `Authorization: Bearer {token}`.",
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "SsoProvider": {
        "type": "object",
        "title": "SsoProvider",
        "description": "A SSO Provider contains the information pertaining to the SSO connection.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "Name of the provider",
            "example": "Some Company"
          },
          "provider": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "Technology of the provider",
            "example": "Auth0"
          }
        },
        "required": [
          "name",
          "provider"
        ],
        "additionalProperties": false
      },
      "SsoUser": {
        "type": "object",
        "title": "SsoUser",
        "description": "A SSO User contains the information pertaining to a users SSO account.",
        "properties": {
          "sso_id": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "SSO ID of the user",
            "example": "1234"
          },
          "sso_provider": {
            "$ref": "#/components/schemas/SsoProvider"
          }
        },
        "required": [
          "sso_id"
        ],
        "additionalProperties": false
      },
      "User": {
        "type": [
          "object",
          "null"
        ],
        "title": "User",
        "description": "A record of a person on the Aryeo platform.",
        "properties": {
          "object": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "description": "A canonical value representing a resource.",
            "example": "PERSONAL_ACCESS_TOKEN"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of the entity. UUID Version 4.",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 0,
            "maxLength": 255,
            "example": "john.doe@gmail.com",
            "description": "Email address of the user."
          },
          "first_name": {
            "type": [
              "string",
              "null"
            ],
            "maxLength": 255,
            "minLength": 0,
            "example": "John",
            "description": "First name of the user."
          },
          "last_name": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "Doe",
            "description": "Last name of the user."
          },
          "full_name": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "John Doe",
            "description": "The full name of the user."
          },
          "internal_notes": {
            "type": [
              "string",
              "null"
            ],
            "example": "Internal notes for the user.",
            "minLength": 0,
            "maxLength": 65535,
            "description": "Internal notes for the user."
          },
          "status": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "enum": [
              "active",
              "inactive",
              "new",
              "sso"
            ],
            "example": "active",
            "description": "The status of the user."
          },
          "phone": {
            "type": [
              "string",
              "null"
            ],
            "example": "123456789",
            "description": "A phone number represented in whichever standards specified by the user, typically ###-###-#### (separated by hyphens).",
            "minLength": 0,
            "maxLength": 255
          },
          "avatar_url": {
            "type": [
              "string",
              "null"
            ],
            "format": "uri",
            "example": "https://picsum.photos/300",
            "description": "The avatar image URL of a user.",
            "minLength": 0,
            "maxLength": 255
          },
          "relationship": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "owner",
            "description": "Describes user's relationship (access level) to a specified group. Only returned if this resource is returned as a sub-resource of a group."
          },
          "sso_users": {
            "type": "array",
            "description": "The list of SSO users associated with this user.",
            "items": {
              "$ref": "#/components/schemas/SsoUser"
            }
          },
          "is_super": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "Indicates if the user is a super user."
          }
        },
        "required": [
          "id",
          "email"
        ],
        "additionalProperties": false
      },
      "SocialProfiles": {
        "title": "SocialProfiles",
        "type": [
          "object",
          "null"
        ],
        "description": "External profile URLs for an agent or brokerage group.",
        "properties": {
          "facebook_profile_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "URL for Facebook.",
            "minLength": 0,
            "maxLength": 65535,
            "example": "https://www.facebook.com/johndoe",
            "format": "uri"
          },
          "instagram_profile_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "URL for Instagram.",
            "minLength": 0,
            "maxLength": 65535,
            "example": "https://www.instagram.com/johndoe",
            "format": "uri"
          },
          "twitter_profile_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "URL for Twitter.",
            "minLength": 0,
            "maxLength": 65535,
            "example": "https://twitter.com/johndoe",
            "format": "uri"
          },
          "linkedin_profile_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "URL for LinkedIn.",
            "minLength": 0,
            "maxLength": 65535,
            "example": "https://www.linkedin.com/in/johndoe/",
            "format": "uri"
          },
          "zillow_profile_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "URL for Zillow.",
            "minLength": 0,
            "maxLength": 65535,
            "example": "https://www.zillow.com/profile/johndoe",
            "format": "uri"
          }
        },
        "additionalProperties": false
      },
      "Group": {
        "type": "object",
        "title": "Group",
        "description": "A collection of users that can interact with the Aryeo platform. Permissions and properties are determined based on the group's type which can be creator, agent, or brokerage.",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 5,
            "maxLength": 5,
            "enum": [
              "GROUP"
            ],
            "example": "GROUP",
            "description": "A canonical value representing a resource."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of the entity. UUID Version 4.",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "type": {
            "type": "string",
            "example": "AGENT",
            "description": "The type of the group. Can be CREATOR, AGENT, or BROKERAGE, and may dictate the attributes of the group returned.",
            "minLength": 0,
            "maxLength": 255,
            "enum": [
              "CREATOR",
              "AGENT",
              "BROKERAGE"
            ]
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "description": "The name of the group.",
            "example": "John Doe Reality"
          },
          "email": {
            "type": [
              "string",
              "null"
            ],
            "format": "email",
            "minLength": 0,
            "maxLength": 255,
            "example": "john.doe@gmail.com",
            "description": "The email address of a group."
          },
          "phone": {
            "type": [
              "string",
              "null"
            ],
            "example": "6175550173",
            "minLength": 0,
            "maxLength": 255,
            "description": "A phone number represented in whichever standards specified by the group, typically ###-###-#### (separated by hyphens)."
          },
          "website_url": {
            "type": [
              "string",
              "null"
            ],
            "example": "https://www.aryeo.com",
            "minLength": 0,
            "maxLength": 255,
            "description": "The website URL of a group.",
            "format": "uri"
          },
          "logo_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "The logo URL of a group.",
            "format": "uri",
            "minLength": 0,
            "maxLength": 255,
            "example": "https://picsum.photos/300"
          },
          "office_name": {
            "type": [
              "string",
              "null"
            ],
            "example": "John Doe Brokerage",
            "minLength": 0,
            "maxLength": 255,
            "description": "The name of the brokerage or team of a real estate agent. Only returned if group's type is AGENT."
          },
          "license_number": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "12345678",
            "description": "The license number of a real estate agent. Only returned if group's type is AGENT."
          },
          "timezone": {
            "type": [
              "string",
              "null"
            ],
            "maxLength": 255,
            "minLength": 0,
            "description": "The default timezone for the group.",
            "example": "America/New_York"
          },
          "currency": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "USD",
            "description": "The default currency for the group.",
            "enum": [
              "USD",
              "CAD",
              "GBP",
              "CHF",
              "EUR",
              "AUD",
              "NZD",
              "ZAR",
              "DKK"
            ]
          },
          "slug": {
            "type": [
              "string",
              "null"
            ],
            "maxLength": 255,
            "minLength": 0,
            "description": "The slug for the group.",
            "example": "example-photography"
          },
          "order_page_url": {
            "type": [
              "string",
              "null"
            ],
            "maxLength": 255,
            "minLength": 0,
            "description": "The order page URL for the group.",
            "example": "https://example-photography.aryeo.com/order"
          },
          "feature_flags": {
            "type": [
              "array",
              "null"
            ],
            "description": "An array of feature flags for the group.",
            "items": {
              "type": "string",
              "description": "The name of the feature flag.",
              "example": "require_photographer_confirmations",
              "minLength": 1,
              "maxLength": 65535,
              "enum": [
                "alternate_unbranded_property_site_url",
                "avalara_tax_syncing",
                "avalara_taxes",
                "byop",
                "calendar",
                "calendar_event_title_modified",
                "customer_teams_order_form_landing_page_override",
                "customer_teams_product_preselect",
                "customer_portal_mobile_apps",
                "customer_select_on_order_form_products_step",
                "database_external_calendar_events",
                "default_reschedule_toggle_false",
                "download_center_fb_boost_1",
                "embedded_payments",
                "housecall_pro",
                "idp_migration_in_progress",
                "listings_create_page",
                "listings_page",
                "min_hour_targets",
                "max_travel_distance",
                "quickbooks_app",
                "require_photographer_confirmations",
                "restricted_image_downloads",
                "showcase_app",
                "showcase_order_form_visibility_designations",
                "showingtime",
                "team_member_restrictions",
                "team_member_hide_customer_pii",
                "virtual_staging_ai",
                "virtuals1_custom_sms_notification_messages",
                "webhooks",
                "zapier",
                "zendesk",
                "zillow_3d_home",
                "zillow_media_exclusives",
                "zillow_photographer_branding",
                "zillow_rentals"
              ]
            }
          },
          "order_page_background_color": {
            "type": [
              "string",
              "null"
            ],
            "maxLength": 7,
            "minLength": 7,
            "description": "The background color for the order page (has a hex value) for the group.",
            "example": "#FF0000"
          },
          "social_profiles": {
            "$ref": "#/components/schemas/SocialProfiles"
          },
          "default_order_form": {
            "$ref": "#/components/schemas/OrderForm"
          },
          "use_territory_awareness": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "Indicates if the order form by default uses territories to filter available users and products."
          },
          "availability_style": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "TIME",
            "description": "The scheduling style the order form should use for timeslot selection by default.",
            "enum": [
              "TIME",
              "TIME_OF_DAY",
              "LEGACY"
            ]
          },
          "slot_interval_minutes": {
            "type": [
              "integer",
              "null"
            ],
            "example": 60,
            "description": "How frequently slotted available times are on the order form by default."
          },
          "use_automated_user_assignment": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "Indicates if the order form uses auto-assignment of users to appointments."
          },
          "automated_user_assignment_strategy": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "RECOMMENDED",
            "description": "The default assignment strategy the order form should use to assign users to appointments, if applicable.",
            "enum": [
              "RECOMMENDED",
              "HOURS_PRIORITY",
              "DISTANCE",
              "ROUND_ROBIN",
              "PRIORITY_LIST"
            ]
          },
          "show_user_names": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "Indicates if the order form by default should display user's names after they have been assigned to an appointment."
          },
          "use_instant_appointment_scheduling": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "Indicates if the order form by default instantly schedules appointments as soon as the order is placed."
          },
          "allow_order_cancellation": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "If the group is a company, then this indicates if company allows customers to cancel orders or order items."
          },
          "order_forms": {
            "type": [
              "array",
              "null"
            ],
            "description": "An array of order forms a vendor group provides for placing orders. Only returned if group's type is CREATOR. ",
            "items": {
              "$ref": "#/components/schemas/OrderForm"
            }
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          },
          "users": {
            "type": [
              "array",
              "null"
            ],
            "description": "The Aryeo users associated with this group.",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "is_brokerage_or_brokerage_agent": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "Indicates if the group is a brokerage or brokerage agent."
          },
          "avatar_url": {
            "type": [
              "string",
              "null"
            ],
            "format": "uri",
            "example": "https://picsum.photos/300",
            "description": "The avatar image URL of a user.",
            "minLength": 0,
            "maxLength": 255
          },
          "internal_notes": {
            "type": [
              "string",
              "null"
            ],
            "description": "Internal notes about the group.",
            "minLength": 0,
            "maxLength": 2550,
            "example": "Internal notes about the group."
          },
          "team_members": {
            "type": [
              "array",
              "null"
            ],
            "description": "NOTE: Users do not have team members.",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "customer_group": {
            "type": [
              "string",
              "null"
            ],
            "description": "NOTE: Users do not have customer groups and they are deprecated.",
            "minLength": 0,
            "maxLength": 2550,
            "example": "null"
          },
          "custom_field_entries": {
            "type": [
              "array",
              "null"
            ],
            "description": "NOTE: Need to make a migration plan for this.",
            "items": {
              "type": "object",
              "description": "Custom field entries for the group.",
              "additionalProperties": false
            }
          },
          "created_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date and time the group was created.",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          },
          "has_restricted_photographers": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates if the group has restricted photographers.",
            "example": true
          },
          "is_visible": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates if the group is visible.",
            "example": true
          },
          "order_index": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The order index of the group.",
            "example": 1
          }
        },
        "required": [
          "id",
          "type",
          "name"
        ],
        "additionalProperties": false
      },
      "OrderForm": {
        "title": "OrderForm",
        "type": "object",
        "description": "An order form is a form that is used to submit an order.",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 10,
            "maxLength": 10,
            "enum": [
              "ORDER_FORM"
            ],
            "example": "ORDER_FORM",
            "description": "A canonical value representing a resource."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of the entity. UUID Version 4."
          },
          "title": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "BQ's Photography Order Form",
            "description": "The title or name of the order form."
          },
          "type": {
            "type": "string",
            "description": "The type of the order form, indicating whether the order form is an Aryeo order form or that of another scheduling service provider.",
            "enum": [
              "ARYEO",
              "EXTERNAL"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "ARYEO"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "minLength": 0,
            "maxLength": 255,
            "example": "https://www.aryeo.com/order-forms/00000000-0000-4000-8000-000000000000",
            "description": "A URL of a publicly-accessible webpage for this order form."
          },
          "is_public": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the order form is publicly visible to all customers on the order form page"
          },
          "thumbnail_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "A thumbnail image URL for the order form.",
            "minLength": 0,
            "maxLength": 65535,
            "example": "https://picsum.photos/300",
            "format": "uri"
          },
          "use_territory_awareness": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the order form is uses territories to filter available users and products."
          },
          "availability_style": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "TIME",
            "description": "The scheduling style the order form should use to for timeslot selection.",
            "enum": [
              "TIME",
              "TIME_OF_DAY",
              "LEGACY",
              "DATETIME_PICKER"
            ]
          },
          "slot_interval_minutes": {
            "type": "integer",
            "example": 60,
            "description": "How frequently slotted available times are on the order form."
          },
          "use_automated_user_assignment": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the order form users auto-assignment of users to appointments."
          },
          "automated_user_assignment_strategy": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "RECOMMENDED",
            "description": "The assignment strategy the order form should use to assign users to appointments, if applicable.",
            "enum": [
              "RECOMMENDED",
              "HOURS_PRIORITY",
              "DISTANCE",
              "ROUND_ROBIN",
              "PRIORITY_LIST"
            ]
          },
          "show_user_names": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the order form should display user's names after they have been assigned to an appointment."
          },
          "require_upfront_payment": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the order form requires an upfront payment to place the order. "
          },
          "upfront_payment_percentage": {
            "type": [
              "integer",
              "null"
            ],
            "example": 50,
            "description": "The percentage of the order form's total price that should be paid upfront."
          },
          "use_instant_appointment_scheduling": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the order form instantly schedules appointments as soon as the order is placed."
          },
          "form_settings": {
            "type": [
              "string",
              "null"
            ],
            "example": "{}",
            "minLength": 0,
            "maxLength": 65535,
            "description": "The settings for the order form."
          },
          "owner": {
            "$ref": "#/components/schemas/Group"
          },
          "company": {
            "$ref": "#/components/schemas/Group"
          }
        },
        "required": [
          "id",
          "title",
          "type",
          "url"
        ],
        "additionalProperties": false
      },
      "Activity": {
        "title": "Activity",
        "type": "object",
        "description": "An event tracked for the purposes of analytics.",
        "properties": {
          "object": {
            "type": "string",
            "description": "String representing type. Objects of the same type share the same schema.",
            "example": "ACTIVITY",
            "minLength": 1,
            "maxLength": 100
          },
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "description": "ID of the entity. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid"
          },
          "title": {
            "type": [
              "string",
              "null"
            ],
            "description": "A title describing the activity.",
            "example": "Appointment Update",
            "minLength": 0,
            "maxLength": 65536
          },
          "name": {
            "type": "string",
            "description": "The name of the activity.",
            "example": "ORDER_MEDIA_DOWNLOADED",
            "minLength": 0,
            "maxLength": 65536,
            "enum": [
              "USER_LOGGED_IN",
              "USER_LOGGED_OUT",
              "USER_REGISTERED",
              "ORDER_MEDIA_DOWNLOADED",
              "ORDER_PLACED",
              "ORDER_VIEWED",
              "APPOINTMENT_SCHEDULED",
              "APPOINTMENT_RESCHEDULED",
              "APPOINTMENT_POSTPONED",
              "APPOINTMENT_CANCELED",
              "APPOINTMENT_ASSIGNED",
              "APPOINTMENT_UNASSIGNED",
              "CUSTOMER_TEAM_CREATED",
              "CUSTOMER_TEAM_MEMBERSHIP_CREATED"
            ]
          },
          "description": {
            "type": "string",
            "description": "The description of the activity.",
            "example": "Branick Weix has downloaded 34 images, 2 videos, and 1 floor plan from 123 Main St.",
            "minLength": 0,
            "maxLength": 65536
          },
          "source": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "enum": [
              "WEB",
              "IOS",
              "API"
            ],
            "example": "API",
            "description": "The source of the activity."
          },
          "occurred_at": {
            "type": "string",
            "description": "The date and time (ISO 8601 format) when the activity was created.",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          },
          "payload": {
            "type": "object",
            "description": "A generic payload containing metadata about the activity.",
            "additionalProperties": true
          },
          "html_payload": {
            "type": [
              "object",
              "null"
            ],
            "description": "A generic payload, HTML format, containing metadata about the activity.",
            "additionalProperties": true
          },
          "system_activity": {
            "type": "boolean",
            "description": "Whether the activity was generated by the system.",
            "example": true
          },
          "target_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "The URL of the target of the activity.",
            "example": "https://www.aryeo.com/orders/123/edit",
            "minLength": 0,
            "maxLength": 65536
          },
          "target_label": {
            "type": [
              "string",
              "null"
            ],
            "description": "The label to use to describe the target_url link.",
            "example": "View Order",
            "minLength": 0,
            "maxLength": 65536
          },
          "acting_user": {
            "$ref": "#/components/schemas/User"
          },
          "acting_group": {
            "$ref": "#/components/schemas/Group"
          },
          "group": {
            "$ref": "#/components/schemas/Group"
          },
          "resource": {
            "type": "object",
            "description": "A resource related to the activity.",
            "additionalProperties": true
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "description",
          "source",
          "occurred_at"
        ]
      },
      "PaginationLink": {
        "type": "object",
        "title": "PageLink",
        "description": "A page link.",
        "properties": {
          "url": {
            "type": [
              "string",
              "null"
            ],
            "description": "The URL of the page.",
            "example": "https://admin.aryeo.test/api/v1/companies?page=2",
            "minLength": 1,
            "maxLength": 65535
          },
          "label": {
            "type": "string",
            "description": "The label of the page.",
            "example": "2",
            "minLength": 1,
            "maxLength": 65535
          },
          "active": {
            "type": "boolean",
            "description": "Whether the page is active.",
            "example": true
          }
        },
        "required": [
          "url",
          "label",
          "active"
        ],
        "additionalProperties": false
      },
      "PaginationMeta": {
        "title": "PaginationMeta",
        "type": "object",
        "description": "Metadata about a paginated response.",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total number of records.",
            "example": 50
          },
          "per_page": {
            "type": "integer",
            "description": "Number of records per page.",
            "example": 15
          },
          "current_page": {
            "type": "integer",
            "description": "The current page.",
            "example": 1
          },
          "last_page": {
            "type": "integer",
            "description": "The last page of records.",
            "example": 4
          },
          "from": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The ID of the first record on this page. This is specified as either `integer` or `null` purely for spec testing purposes. The model which is autogenerated from this definition will be thrown out and written by-hand.",
            "example": 1
          },
          "to": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The ID of the last record on this page. This is specified as either `integer` or `null` purely for spec testing purposes. The model which is autogenerated from this definition will be thrown out and written by-hand.",
            "example": 15
          },
          "path": {
            "type": "string",
            "description": "The current paged path.",
            "example": "https://api.aryeo.com/v1/{path}",
            "minLength": 1,
            "maxLength": 65535
          },
          "links": {
            "type": [
              "array",
              "null"
            ],
            "description": "Links.",
            "items": {
              "$ref": "#/components/schemas/PaginationLink"
            }
          }
        },
        "required": [
          "total",
          "per_page",
          "current_page",
          "last_page",
          "path"
        ],
        "additionalProperties": false
      },
      "PaginationLinks": {
        "title": "PaginationLinks",
        "type": "object",
        "description": "Related links for a paginated response.",
        "properties": {
          "first": {
            "type": "string",
            "description": "The first page.",
            "example": "https://api.aryeo.com/v1/{path}?page=1",
            "minLength": 1,
            "maxLength": 65535
          },
          "last": {
            "type": "string",
            "description": "The last page.",
            "example": "https://api.aryeo.com/v1/{path}?page=10",
            "minLength": 1,
            "maxLength": 65535
          },
          "prev": {
            "type": [
              "string",
              "null"
            ],
            "description": "The previous page. This is specified as either `string` or `null` purely for spec testing purposes. The model which is autogenerated from this definition will be thrown out and written by-hand.",
            "example": "https://api.aryeo.com/v1/{path}?page=2",
            "minLength": 1,
            "maxLength": 65535
          },
          "next": {
            "type": [
              "string",
              "null"
            ],
            "description": "The next page. This is specified as either `string` or `null` purely for spec testing purposes. The model which is autogenerated from this definition will be thrown out and written by-hand.",
            "example": "https://api.aryeo.com/v1/{path}?page=3",
            "minLength": 1,
            "maxLength": 65535
          }
        },
        "required": [
          "first",
          "last"
        ],
        "additionalProperties": false
      },
      "ActivityCollection": {
        "title": "ActivityCollection",
        "type": "object",
        "description": "A collection of activities.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "type": [
              "array",
              "null"
            ],
            "description": "A collection of objects.",
            "items": {
              "$ref": "#/components/schemas/Activity"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "additionalProperties": false,
        "required": [
          "status"
        ]
      },
      "ApiError404": {
        "type": "object",
        "title": "ApiError404",
        "description": "A not found error returned by the API.",
        "properties": {
          "status": {
            "type": "string",
            "example": "error",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "message": {
            "type": "string",
            "description": "The error message.",
            "example": "{ApiError message.}",
            "minLength": 0,
            "maxLength": 255
          },
          "code": {
            "type": [
              "integer",
              "null"
            ],
            "description": "A numeric code corresponding to the error.",
            "example": 404
          }
        },
        "required": [
          "status",
          "message"
        ],
        "additionalProperties": false
      },
      "ApiFail422": {
        "type": "object",
        "title": "ApiFail422",
        "description": "A processing or validation failure returned by the API.",
        "properties": {
          "status": {
            "type": "string",
            "example": "fail",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "ApiError500": {
        "type": "object",
        "title": "ApiError500",
        "description": "An internal server error returned by the API.",
        "properties": {
          "status": {
            "type": "string",
            "example": "error",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "message": {
            "type": "string",
            "description": "The error message.",
            "example": "{ApiError message.}",
            "minLength": 0,
            "maxLength": 255
          },
          "code": {
            "type": [
              "integer",
              "null"
            ],
            "description": "A numeric code corresponding to the error.",
            "example": 500
          }
        },
        "required": [
          "status",
          "message"
        ],
        "additionalProperties": false
      },
      "ActivityPostPayload": {
        "title": "ActivityPostPayload",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the activity.",
            "example": "ORDER_MEDIA_DOWNLOADED",
            "minLength": 0,
            "maxLength": 65536,
            "enum": [
              "USER_LOGGED_IN",
              "USER_LOGGED_OUT",
              "USER_REGISTERED",
              "ORDER_MEDIA_DOWNLOADED",
              "ORDER_PLACED",
              "ORDER_VIEWED"
            ]
          },
          "description": {
            "type": "string",
            "description": "The description of the activity.",
            "example": "Branick Weix has downloaded 34 images, 2 videos, and 1 floor plan from 123 Main St.",
            "minLength": 0,
            "maxLength": 65536
          },
          "source": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "enum": [
              "WEB",
              "IOS",
              "API"
            ],
            "example": "API",
            "description": "The source of the activity."
          },
          "group_id": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of a group. UUID Version 4.",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of a user. UUID Version 4.",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "payload": {
            "type": "object",
            "description": "A generic payload containing metadata about the activity.",
            "additionalProperties": true
          },
          "resource_type": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "enum": [
              "LISTING",
              "ORDER"
            ],
            "example": "LISTING",
            "description": "The resource type that corresponds to the activity."
          },
          "resource_id": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of the corresponding resource. UUID Version 4.",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000"
          }
        },
        "additionalProperties": false,
        "required": [
          "name",
          "description",
          "source",
          "group_id",
          "user_id"
        ]
      },
      "ActivityResource": {
        "title": "ActivityResource",
        "type": "object",
        "description": "An activity.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "$ref": "#/components/schemas/Activity"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "additionalProperties": false,
        "required": [
          "status"
        ]
      },
      "ApiError403": {
        "type": "object",
        "title": "ApiError403",
        "description": "A forbidden error returned by the API.",
        "properties": {
          "status": {
            "type": "string",
            "example": "error",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "message": {
            "type": "string",
            "description": "The error message.",
            "example": "{ApiError message.}",
            "minLength": 0,
            "maxLength": 255
          },
          "code": {
            "type": [
              "integer",
              "null"
            ],
            "description": "A numeric code corresponding to the error.",
            "example": 403
          }
        },
        "required": [
          "status",
          "message"
        ],
        "additionalProperties": false
      },
      "AddressPostPayload": {
        "title": "AddressPostPayload",
        "type": "object",
        "properties": {
          "latitude": {
            "type": [
              "number",
              "null"
            ],
            "description": "The geographic latitude of some reference point of the location, specified in degrees and decimal parts. Positive numbers must not include the plus symbol.",
            "example": 42.35157458574123,
            "minimum": -180,
            "maximum": 180
          },
          "longitude": {
            "type": [
              "number",
              "null"
            ],
            "description": "The geographic longitude of some reference point of the location, specified in degrees and decimal parts. Positive numbers must not include the plus symbol.",
            "example": -71.05763741484657,
            "maximum": 180,
            "minimum": -180
          },
          "street_number": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "107",
            "description": "The street number portion of a location's address. In some areas, the street number may contain non-numeric characters. This field can also contain extensions and modifiers to the street number, such as '1/2' or '-B'."
          },
          "street_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The street name portion of a location's address.",
            "minLength": 0,
            "maxLength": 255,
            "example": "South St"
          },
          "unit_number": {
            "type": [
              "string",
              "null"
            ],
            "description": "The number or portion of a larger building or complex. Examples are: 'APT G', '55', etc.",
            "minLength": 0,
            "maxLength": 255,
            "example": "Unit 2F"
          },
          "postal_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "The postal code portion of a location's address.",
            "example": "02111",
            "minLength": 0,
            "maxLength": 255
          },
          "city": {
            "type": [
              "string",
              "null"
            ],
            "description": "The city of a location's address.",
            "example": "Boston",
            "minLength": 0,
            "maxLength": 255
          },
          "city_region": {
            "type": [
              "string",
              "null"
            ],
            "description": "A sub-section or area of a defined city. Examples would be SoHo in New York, NY, Ironbound in Newark, NJ or Inside the Beltway.",
            "minLength": 0,
            "maxLength": 255,
            "example": "Leather District"
          },
          "county_or_parish": {
            "type": [
              "string",
              "null"
            ],
            "description": "The County, Parish or other regional authority of the location.",
            "minLength": 0,
            "maxLength": 255,
            "example": "Suffolk County"
          },
          "state_or_province": {
            "type": [
              "string",
              "null"
            ],
            "description": "The ISO 3166-2 subdivision code for the state or province of the location. For example, \u201cMA\u201d for Massachusetts, United States.",
            "minLength": 0,
            "maxLength": 255,
            "example": "MA"
          },
          "state_or_province_region": {
            "type": [
              "string",
              "null"
            ],
            "description": "A sub-section or area of a defined state or province. Examples would be the Keys in FL or Hudson Valley in NY.",
            "minLength": 0,
            "maxLength": 255,
            "example": "Cape Cod"
          },
          "country": {
            "type": [
              "string",
              "null"
            ],
            "description": "The ISO 3166-1 country code for this for the country of the location.",
            "minLength": 0,
            "maxLength": 255,
            "example": "US"
          },
          "country_region": {
            "type": [
              "string",
              "null"
            ],
            "description": "A sub-section or area of a defined country. Examples would be Napa Valley in the US, or the Amalfi Coast in Italy.",
            "example": "Napa Valley",
            "minLength": 0,
            "maxLength": 255
          }
        },
        "required": [
          "latitude",
          "longitude"
        ],
        "additionalProperties": false
      },
      "Address": {
        "title": "Address",
        "type": "object",
        "description": "A street address and additional metadata about a location.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of the entity. UUID Version 4."
          },
          "latitude": {
            "type": [
              "number",
              "null"
            ],
            "description": "The geographic latitude of some reference point of the location, specified in degrees and decimal parts. Positive numbers must not include the plus symbol.",
            "example": 42.35157458574123,
            "minimum": -180,
            "maximum": 180
          },
          "longitude": {
            "type": [
              "number",
              "null"
            ],
            "description": "The geographic longitude of some reference point of the location, specified in degrees and decimal parts. Positive numbers must not include the plus symbol.",
            "example": -71.05763741484657,
            "maximum": 180,
            "minimum": -180
          },
          "street_number": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "107",
            "description": "The street number portion of a location's address. In some areas, the street number may contain non-numeric characters. This field can also contain extensions and modifiers to the street number, such as '1/2' or '-B'."
          },
          "street_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The street name portion of a location's address.",
            "minLength": 0,
            "maxLength": 255,
            "example": "South St"
          },
          "unit_number": {
            "type": [
              "string",
              "null"
            ],
            "description": "The number or portion of a larger building or complex. Examples are: 'APT G', '55', etc.",
            "minLength": 0,
            "maxLength": 255,
            "example": "Unit 2F"
          },
          "postal_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "The postal code portion of a location's address.",
            "example": "02111",
            "minLength": 0,
            "maxLength": 255
          },
          "city": {
            "type": [
              "string",
              "null"
            ],
            "description": "The city of a location's address.",
            "example": "Boston",
            "minLength": 0,
            "maxLength": 255
          },
          "city_region": {
            "type": [
              "string",
              "null"
            ],
            "description": "A sub-section or area of a defined city. Examples would be SoHo in New York, NY, Ironbound in Newark, NJ or Inside the Beltway.",
            "minLength": 0,
            "maxLength": 255,
            "example": "Leather District"
          },
          "county_or_parish": {
            "type": [
              "string",
              "null"
            ],
            "description": "The County, Parish or other regional authority of the location.",
            "minLength": 0,
            "maxLength": 255,
            "example": "Suffolk County"
          },
          "state_or_province": {
            "type": [
              "string",
              "null"
            ],
            "description": "The ISO 3166-2 subdivision code for the state or province of the location. For example, \u201cMA\u201d for Massachusetts, United States.",
            "minLength": 0,
            "maxLength": 255,
            "example": "MA"
          },
          "state_or_province_region": {
            "type": [
              "string",
              "null"
            ],
            "description": "A sub-section or area of a defined state or province. Examples would be the Keys in FL or Hudson Valley in NY.",
            "minLength": 0,
            "maxLength": 255,
            "example": "Cape Cod"
          },
          "country": {
            "type": [
              "string",
              "null"
            ],
            "description": "The ISO 3166-1 country code for this for the country of the location.",
            "minLength": 0,
            "maxLength": 255,
            "example": "US"
          },
          "country_region": {
            "type": [
              "string",
              "null"
            ],
            "description": "A sub-section or area of a defined country. Examples would be Napa Valley in the US, or the Amalfi Coast in Italy.",
            "example": "Napa Valley",
            "minLength": 0,
            "maxLength": 255
          },
          "timezone": {
            "type": [
              "string",
              "null"
            ],
            "description": "The assumed timezone the address is located in.",
            "minLength": 0,
            "maxLength": 255,
            "example": "America/New_York"
          },
          "unparsed_address": {
            "type": [
              "string",
              "null"
            ],
            "description": "Unparsed text representation of the address. ",
            "example": "107 South St, Boston MA, 02111",
            "minLength": 0,
            "maxLength": 255
          },
          "unparsed_address_part_one": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "description": "Unparsed text representation of the first part of the address, typically including the street number, street name, and unit number if applicable.  ",
            "example": "107 South St, Unit 2F"
          },
          "unparsed_address_part_two": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "description": "Unparsed text representation of the second part of the address, typically including the city, state or province, and postal code.  ",
            "example": "Boston, MA 02111"
          },
          "is_map_dirty": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "Does this address need to be geocoded?"
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "AddressResource": {
        "title": "AddressResource",
        "type": "object",
        "description": "An address.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "$ref": "#/components/schemas/Address"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "CustomerGroup": {
        "title": "CustomerGroup",
        "type": "object",
        "description": "Customer groups are used to group multiple customers together, allowing you to apply settings such as price overrides and billing customer configurations in bulk.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of the entity. UUID Version 4.",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "description": "The name of the customer group.",
            "example": "John Doe Customer Group"
          },
          "affiliate_id": {
            "type": [
              "string",
              "null"
            ],
            "maxLength": 255,
            "minLength": 0,
            "description": "The affliate ID for the customer group.",
            "example": "JOHN_DOE"
          },
          "billing_customer": {
            "$ref": "#/components/schemas/Group"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "additionalProperties": false
      },
      "ListingLot": {
        "title": "ListingLot",
        "type": "object",
        "description": "Parcel data of the lot of a listing. Includes nearly everything about the land that makes up the listing.",
        "properties": {
          "size_acres": {
            "type": [
              "number",
              "null"
            ],
            "description": "Total area of the lot of a listing in acres. ",
            "example": 0.47,
            "minimum": 0
          },
          "open_parking_spaces": {
            "type": [
              "number",
              "null"
            ],
            "description": "Number of parking spaces.",
            "example": 3,
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "ListingBuilding": {
        "title": "ListingBuilding",
        "type": "object",
        "description": "Structural data of the primary building on a listing. Includes everything from square footage of certain spaces to construction dates. ",
        "properties": {
          "bedrooms": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Total number of bedrooms.",
            "example": 4
          },
          "bathrooms": {
            "type": [
              "number",
              "null"
            ],
            "description": "Sum of the number of bathrooms. Represented as a number in order to support half-baths.",
            "example": 3.5
          },
          "square_feet": {
            "type": [
              "number",
              "null"
            ],
            "description": "Total number of square feet.",
            "example": 2511
          },
          "year_built": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Year the property was built.",
            "example": 1960
          },
          "bedrooms_number": {
            "type": "number",
            "description": "Total number of bedrooms.",
            "example": 4,
            "deprecated": true
          }
        },
        "additionalProperties": false
      },
      "ListingPrice": {
        "title": "ListingPrice",
        "type": "object",
        "properties": {
          "list_price": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The current price of the listing.",
            "example": 250000,
            "minimum": 0
          },
          "list_price_formatted": {
            "type": [
              "string",
              "null"
            ],
            "description": "The current price of the listing formatted for display.",
            "example": "$250,000",
            "minLength": 0,
            "maxLength": 255
          }
        },
        "description": "Valuation data relating to the price of a listing.",
        "additionalProperties": false
      },
      "CustomerTeamMembership": {
        "type": "object",
        "title": "CustomerTeamMembership",
        "description": "A record of a customer team membership on the Aryeo platform.",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 24,
            "maxLength": 24,
            "enum": [
              "CUSTOMER_TEAM_MEMBERSHIP"
            ],
            "example": "CUSTOMER_TEAM_MEMBERSHIP",
            "description": "A canonical value representing a resource."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of the entity. UUID Version 4.",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "role": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "The role of the customer team membership.",
            "enum": [
              "admin",
              "member"
            ],
            "example": "admin"
          },
          "invitation_accepted_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date and time (ISO 8601 format) when the invitation was accepted.",
            "format": "date-time",
            "minLength": 27,
            "maxLength": 27,
            "example": "2025-04-01T05:59:59.999999Z"
          },
          "status": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "The status of the customer team membership.",
            "enum": [
              "deleted",
              "archived",
              "revoked",
              "active",
              "invited"
            ],
            "example": "active"
          },
          "customer_team": {
            "$ref": "#/components/schemas/CustomerGroup"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the customer team membership is active.",
            "example": true
          },
          "is_archived": {
            "type": "boolean",
            "description": "Whether the customer team membership is archived.",
            "example": true
          },
          "is_deleted": {
            "type": "boolean",
            "description": "Whether the customer team membership is deleted.",
            "example": true
          },
          "is_invited": {
            "type": "boolean",
            "description": "Whether the customer team membership is invited.",
            "example": true
          }
        },
        "required": [
          "id",
          "role",
          "status",
          "customer_team",
          "is_active",
          "is_archived",
          "is_deleted",
          "is_invited"
        ],
        "additionalProperties": false
      },
      "Image": {
        "title": "Image",
        "type": "object",
        "description": "A visual representation of something.",
        "properties": {
          "object": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "description": "A canonical value representing a resource.",
            "example": "IMAGE"
          },
          "id": {
            "type": "string",
            "description": "ID of the entity. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "thumbnail_url": {
            "type": "string",
            "description": "A URL for a thumbnail-sized version of the image.",
            "example": "https://picsum.photos/250/200",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri"
          },
          "large_url": {
            "type": "string",
            "description": "A URL for a large version of the image.",
            "example": "https://picsum.photos/1750/1400",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri"
          },
          "filename": {
            "type": "string",
            "description": "The name of the file.",
            "example": "image.jpg",
            "minLength": 1,
            "maxLength": 255
          },
          "original_url": {
            "type": "string",
            "description": "A URL for the original, full-resolution version of the image. Useful for downloading.",
            "example": "https://picsum.photos/2500/2000",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri"
          },
          "index": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The order in which the image should be displayed amongst other related images.",
            "example": 2
          },
          "caption": {
            "type": [
              "string",
              "null"
            ],
            "description": "A brief explanation of the image.",
            "example": "This is the front of the house.",
            "minLength": 1,
            "maxLength": 255
          },
          "display_in_gallery": {
            "type": "boolean",
            "description": "Should the image be displayed in a gallery?",
            "example": true
          }
        },
        "required": [
          "id",
          "thumbnail_url",
          "large_url",
          "filename",
          "original_url",
          "display_in_gallery"
        ],
        "additionalProperties": false
      },
      "Video": {
        "title": "Video",
        "type": "object",
        "description": "A recording of moving visual images. Provided either as a download URL (MP4) or a link (e.g. YouTube, Vimeo).",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 5,
            "maxLength": 5,
            "enum": [
              "VIDEO"
            ],
            "example": "VIDEO",
            "description": "A canonical value representing a resource."
          },
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "description": "ID of the entity. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid"
          },
          "title": {
            "type": [
              "string",
              "null"
            ],
            "example": "The New Vimeo Player (You Know, For Videos)",
            "description": "The title of the video given by the uploading user.",
            "maxLength": 255,
            "minLength": 1
          },
          "duration": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The video's runtime in seconds.",
            "example": 360
          },
          "display_type": {
            "type": "string",
            "example": "BRANDED",
            "description": "The display type determines if the video is branded or unbranded (can also be none or both). This affects whether the video is displayed on branded or unbranded marketing materials such as the property website.",
            "maxLength": 255,
            "minLength": 1,
            "enum": [
              "BRANDED",
              "UNBRANDED",
              "BOTH",
              "NONE"
            ]
          },
          "source_type": {
            "type": "string",
            "example": "OPTIMIZED",
            "description": "The original upload source of the video, used to determine how to handle the playback_url of the video and other display properties. ",
            "maxLength": 255,
            "minLength": 1,
            "enum": [
              "YOUTUBE",
              "VIMEO",
              "OPTIMIZED",
              "UPLOADED",
              "LINK"
            ]
          },
          "thumbnail_url": {
            "type": "string",
            "description": "A thumbnail image URL for the video.",
            "minLength": 0,
            "maxLength": 65535,
            "example": "https://picsum.photos/300",
            "format": "uri"
          },
          "playback_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "A URL linking to playback stream of the video.",
            "minLength": 0,
            "maxLength": 65535,
            "example": "https://player.vimeo.com/video/76979871",
            "format": "uri"
          },
          "download_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "A URL for downloading the video.",
            "example": "https://videos.aryeo.com/listings/00000000-0000-4000-8000-000000000000/00000000-0000-4000-8000-000000000000.mp4",
            "maxLength": 65535,
            "format": "uri",
            "minLength": 1
          },
          "share_url": {
            "type": [
              "string",
              "null"
            ],
            "format": "uri",
            "description": "A URL linking to a public viewing optimized webpage the video.",
            "example": "https://www.aryeo.com/v2/00000000-0000-4000-8000-000000000000/videos/1",
            "minLength": 0,
            "maxLength": 65535
          }
        },
        "required": [
          "id",
          "display_type",
          "source_type",
          "thumbnail_url",
          "playback_url"
        ],
        "additionalProperties": false
      },
      "FloorPlan": {
        "title": "FloorPlan",
        "type": "object",
        "description": "A scale diagram of the arrangement of a building.",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 9,
            "maxLength": 9,
            "enum": [
              "FLOORPLAN"
            ],
            "example": "FLOORPLAN",
            "description": "A canonical value representing a resource."
          },
          "id": {
            "type": "string",
            "description": "ID of the entity. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "original_url": {
            "type": "string",
            "description": "A URL for the original, full-resolution version of the floor plan. Useful for downloading.",
            "example": "https://picsum.photos/2500/2000",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri"
          },
          "large_url": {
            "type": "string",
            "description": "A URL for a large version of the floor plan.",
            "example": "https://picsum.photos/1750/1400",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri"
          },
          "thumbnail_url": {
            "type": "string",
            "description": "A URL for a thumbnail-sized version of the floor plan.",
            "example": "https://picsum.photos/250/200",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri"
          },
          "title": {
            "type": [
              "string",
              "null"
            ],
            "description": "The title (or caption) of the floor plan.",
            "example": "Downstairs floorplan",
            "minLength": 1,
            "maxLength": 255
          },
          "index": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "example": 1,
            "minimum": 0,
            "description": "Index order position of the floor plan."
          }
        },
        "required": [
          "id",
          "original_url",
          "large_url",
          "thumbnail_url"
        ],
        "additionalProperties": false
      },
      "InteractiveContent": {
        "title": "InteractiveContent",
        "type": "object",
        "description": "A 3D virtual tour.",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the entity. UUID Version 4.",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid"
          },
          "title": {
            "type": [
              "string",
              "null"
            ],
            "example": "My Matterport",
            "description": "The title of the interactive content given by the uploading user.",
            "maxLength": 255,
            "minLength": 1
          },
          "display_type": {
            "type": "string",
            "description": "Is the content branded, unbranded, or both?",
            "minLength": 1,
            "maxLength": 65535,
            "enum": [
              "BRANDED",
              "UNBRANDED",
              "BOTH"
            ],
            "example": "BRANDED"
          },
          "content_type": {
            "type": "string",
            "description": "The type of interactive content.",
            "example": "MATTERPORT",
            "minLength": 1,
            "maxLength": 65535,
            "enum": [
              "MATTERPORT",
              "OTHER"
            ]
          },
          "url": {
            "type": "string",
            "description": "URL for the content.",
            "example": "https://my.matterport.com/show/?m=HFaxPzqNFfm",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri"
          },
          "thumbnail_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "A URL for a thumbnail-sized preview of the content.",
            "example": "https://picsum.photos/300",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri"
          }
        },
        "required": [
          "id",
          "display_type",
          "content_type",
          "url"
        ],
        "additionalProperties": false
      },
      "PropertyWebsite": {
        "title": "PropertyWebsite",
        "type": "object",
        "description": "Website (in branded and unbranded versions) that displays information about a property.",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the entity. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          },
          "branded_url": {
            "type": "string",
            "description": "URL for branded version of website.",
            "minLength": 1,
            "maxLength": 65535,
            "example": "https://www.aryeo.com/v2/1200-noble-way-flower-mound-1760/branded",
            "format": "uri"
          },
          "unbranded_url": {
            "type": "string",
            "description": "URL for unbranded version of website.",
            "minLength": 1,
            "maxLength": 65535,
            "example": "https://www.aryeo.com/v2/1200-noble-way-flower-mound-1760/unbranded",
            "format": "uri"
          }
        },
        "required": [
          "id",
          "branded_url",
          "unbranded_url"
        ],
        "additionalProperties": false
      },
      "PolotnoJson": {
        "title": "PolotnoJson",
        "type": "object",
        "description": "The JSON representation of a Polotno canvas.",
        "properties": {
          "width": {
            "type": "integer",
            "example": 500,
            "description": "The width of the canvas."
          },
          "height": {
            "type": "integer",
            "example": 500,
            "description": "The height of the canvas."
          }
        },
        "required": [
          "width",
          "height"
        ],
        "additionalProperties": false
      },
      "Export": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "description": "Unique identifier for the export."
          },
          "key": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 1,
            "maxLength": 65535,
            "description": "Key identifier for the export.",
            "example": "export-123"
          },
          "file_path": {
            "type": "string",
            "description": "Path to the exported file.",
            "format": "uri",
            "example": "https://aryeo.sfo2.cdn.digitaloceanspaces.com/marketing-material-templates/sirius-template-preview.jpg",
            "minLength": 1,
            "maxLength": 65535
          },
          "content_type": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 1,
            "maxLength": 65535,
            "example": "application/pdf",
            "description": "MIME type of the exported file."
          },
          "extension": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 1,
            "maxLength": 65535,
            "example": "pdf",
            "description": "File extension of the exported file."
          }
        },
        "required": [
          "uuid",
          "key",
          "file_path",
          "content_type",
          "extension"
        ],
        "additionalProperties": false
      },
      "MarketingMaterial": {
        "title": "MarketingMaterial",
        "type": "object",
        "description": "A marketing material record.",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 18,
            "maxLength": 18,
            "enum": [
              "MARKETING_MATERIAL"
            ],
            "example": "MARKETING_MATERIAL",
            "description": "A canonical value representing a resource."
          },
          "id": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "description": "The ID of the marketing material. UUID Version 4."
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "New marketing material",
            "description": "The name of the marketing material."
          },
          "thumbnail_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "A URL for a thumbnail-sized preview of the marketing material.",
            "example": "https://picsum.photos/250/200",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri"
          },
          "published_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date and time (ISO 8601 format) when the marketing material record was last published.",
            "example": "2021-06-30T20:30:00Z",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20
          },
          "polotno_json": {
            "$ref": "#/components/schemas/PolotnoJson"
          },
          "listing_download_hash": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "minLength": 36,
            "maxLength": 36,
            "description": "The ID of the listing the marketing material belongs to. UUID Version 4."
          },
          "json_updated_at": {
            "type": [
              "number",
              "null"
            ],
            "description": "Timestamp of when the polotno_json field was last updated.",
            "example": 1624057368000
          },
          "exports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Export"
            }
          }
        },
        "additionalProperties": false
      },
      "Order": {
        "title": "Order",
        "type": "object",
        "description": "A payment request for some content or service.",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 5,
            "maxLength": 5,
            "enum": [
              "ORDER"
            ],
            "example": "ORDER",
            "description": "A canonical value representing a resource."
          },
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "description": "ID of the entity. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid"
          },
          "identifier": {
            "type": [
              "string",
              "null"
            ],
            "description": "A vanity id used for internal tracking of orders for a given vendor.",
            "example": "Order #2",
            "minLength": 0,
            "maxLength": 255
          },
          "number": {
            "type": [
              "integer",
              "null"
            ],
            "description": "A vanity id used for internal tracking of orders for a given vendor.",
            "example": 100
          },
          "title": {
            "type": "string",
            "description": "The title of the order, generated by combining the order's number property with the prefix 'Order #'.",
            "example": "Order #100",
            "minLength": 0,
            "maxLength": 255
          },
          "status": {
            "type": "string",
            "description": "The status of the order.",
            "enum": [
              "CONFIRMED",
              "GHOST"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "GHOST"
          },
          "order_status": {
            "type": "string",
            "description": "The status of the order.",
            "enum": [
              "DRAFT",
              "OPEN",
              "CANCELED"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "OPEN"
          },
          "is_ghost": {
            "type": "boolean",
            "description": "Indicates if the order is a ghost order.",
            "example": true
          },
          "fulfilled_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date and time (ISO 8601 format) when the order was fulfilled.",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          },
          "fulfillment_status": {
            "type": "string",
            "description": "The fulfillment status of the order.",
            "enum": [
              "FULFILLED",
              "UNFULFILLED"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "FULFILLED"
          },
          "payment_status": {
            "type": "string",
            "enum": [
              "PAID",
              "PARTIALLY_PAID",
              "UNPAID"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "PAID",
            "description": "The payment status of the order."
          },
          "internal_notes": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 65535,
            "example": "Hey there notes!",
            "description": "Internal order notes."
          },
          "currency": {
            "type": "string",
            "description": "The three-letter ISO 4217 currency code for the currency in which this order was or will be transacted. Must be a supported currency of Aryeo.",
            "example": "USD",
            "minLength": 0,
            "maxLength": 255,
            "enum": [
              "USD",
              "CAD",
              "GBP",
              "CHF",
              "EUR",
              "AUD",
              "NZD",
              "ZAR"
            ]
          },
          "total_amount": {
            "type": "integer",
            "example": 2099,
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the total order amount that was or will be charged. This accounts for order items and taxes. ",
            "minimum": 0
          },
          "payment_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "A URL of a publicly-accessible webpage to pay for the order.",
            "example": "https://www.aryeo.com/v2/stripe/checkout/order/00000000-0000-4000-8000-000000000000?pageType=order",
            "maxLength": 65535,
            "minLength": 0
          },
          "status_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "A URL of a publicly-accessible webpage to see the order's status.",
            "example": "https://www.aryeo.com/orders/00000000-0000-4000-8000-000000000000/status",
            "maxLength": 65535,
            "minLength": 0
          },
          "invoice_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "A URL of a publicly-accessible pdf invoice of the order.",
            "example": "https://app.aryeo.test/orders/00000000-0000-4000-8000-000000000000/invoice/download",
            "maxLength": 65535,
            "minLength": 0
          },
          "downloads_allowed": {
            "type": "boolean",
            "description": "Indicates if the current user is allowed to download content from the attached listing.",
            "example": true
          },
          "payments_allowed": {
            "type": "boolean",
            "description": "Indicates if the current user is allowed to make a payment for the order.",
            "example": true
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "customer": {
            "$ref": "#/components/schemas/Group"
          },
          "customer_group": {
            "$ref": "#/components/schemas/CustomerGroup"
          },
          "listing": {
            "$ref": "#/components/schemas/Listing"
          },
          "order_form": {
            "$ref": "#/components/schemas/OrderForm"
          },
          "discounts": {
            "type": "array",
            "description": "The list of discounts applied to the order.",
            "items": {
              "$ref": "#/components/schemas/Discount"
            }
          },
          "tags": {
            "type": "array",
            "description": "The list of tags applied to the order.",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "items": {
            "type": "array",
            "description": "items",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "custom_items": {
            "type": [
              "array",
              "null"
            ],
            "description": "The list of custom items applied to the order.",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "appointments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Appointment"
            }
          },
          "unconfirmed_appointments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Appointment"
            }
          },
          "created_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date and time (ISO 8601 format) when the order was created.",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          },
          "updated_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date and time (ISO 8601 format) when the order was last updated.",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          },
          "custom_fields": {
            "type": [
              "array",
              "null"
            ],
            "description": "The list of custom fields applied to the order.",
            "items": {
              "type": "object",
              "description": "A key-value pair of custom field data.",
              "additionalProperties": false
            }
          },
          "taxes": {
            "type": "array",
            "description": "The list of taxes applied to the order.",
            "items": {
              "$ref": "#/components/schemas/Tax"
            }
          },
          "booking_limits": {
            "$ref": "#/components/schemas/BookingLimits"
          },
          "filter_by_square_feet": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates if the order should be filtered by square feet.",
            "example": true
          },
          "filter_by_list_price": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates if the order should be filtered by list price.",
            "example": true
          },
          "scheduling_assignment_strategy": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "RECOMMENDED",
            "description": "The strategy used for scheduling assignment.",
            "enum": [
              "RECOMMENDED",
              "HOURS_PRIORITY",
              "DISTANCE",
              "ROUND_ROBIN",
              "PRIORITY_LIST"
            ]
          },
          "balance_amount": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The balance amount of the order.",
            "example": 2099,
            "minimum": 0
          },
          "total_tax_amount": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The total tax amount of the order.",
            "minimum": 0,
            "example": 2099
          },
          "total_discount_amount": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The total discount amount of the order.",
            "minimum": 0,
            "example": 2099
          },
          "payments": {
            "type": "array",
            "description": "The list of payments applied to the order.",
            "items": {
              "$ref": "#/components/schemas/Payment"
            }
          }
        },
        "required": [
          "id",
          "title",
          "fulfillment_status",
          "payment_status",
          "status_url",
          "downloads_allowed",
          "payments_allowed",
          "created_at",
          "updated_at"
        ],
        "additionalProperties": false
      },
      "Appointment": {
        "title": "Appointment",
        "type": "object",
        "description": "An appointment.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of the entity. UUID Version 4."
          },
          "status": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "SCHEDULED",
            "description": "The status of the appointment.",
            "enum": [
              "SCHEDULED",
              "UNSCHEDULED",
              "CANCELED"
            ]
          },
          "title": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 65536,
            "example": "Appointment title",
            "description": "The title of the appointment."
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 65536,
            "example": "Customer: John Doe\nOrder Details: Order #123",
            "description": "The multi-line description of the appointment."
          },
          "start_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date and time (ISO 8601 format) when the appointment is set to start.",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          },
          "end_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date and time (ISO 8601 format) when the appointment is set to end.",
            "example": "2021-06-30T20:30:00Z",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20
          },
          "rescheduled_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date and time (ISO 8601 format) when the appointment was rescheduled.",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          },
          "postponed_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date and time (ISO 8601 format) when the appointment was postponed.",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          },
          "previous_start_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date and time (ISO 8601 format) when the appointment was previously scheduled for.",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          },
          "preference_type": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "TIME",
            "description": "The type of preferred scheduling information provided by a customer to aid in scheduling this appointment.",
            "enum": [
              "ASAP",
              "TIME",
              "TIME_OF_DAY",
              "NONE"
            ]
          },
          "preferred_start_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "A preferred date and time (ISO 8601 format) for when the appointment could start. Only returned if unconfirmed appointment's preference type is TIME. ",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          },
          "preferred_start_at_day": {
            "type": [
              "string",
              "null"
            ],
            "description": "A preferred date (ISO 8601 format) for when the appointment could start. Only returned if unconfirmed appointment's preference type is TIME_OF_DAY. ",
            "format": "date",
            "minLength": 10,
            "maxLength": 10,
            "example": "2021-06-30"
          },
          "preferred_start_at_time_of_day": {
            "type": [
              "string",
              "null"
            ],
            "description": "A preferred time of day for when the appointment could start. Only returned if unconfirmed appointment's preference type is TIME_OF_DAY. ",
            "minLength": 0,
            "maxLength": 255,
            "example": "AFTERNOON",
            "enum": [
              "MORNING",
              "MIDDAY",
              "AFTERNOON",
              "TWILIGHT"
            ]
          },
          "duration": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The length of the appointment in minutes.",
            "example": 60
          },
          "user_has_appointments_manage_permission": {
            "type": "boolean",
            "example": true,
            "description": "Does the authorized user have the availability to manage this appointment?"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "users": {
            "description": "Users attached to the appointment.",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "items": {
            "type": "array",
            "description": "Items attached to the appointment.",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "can_cancel": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "Indicates if the request user can cancel the appointment."
          },
          "can_reschedule": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "Indicates if the request user can reschedule the appointment."
          },
          "is_within_cancellation_lock_period": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "Indicates if the appointment is within the cancellation lock period."
          },
          "is_within_rescheduling_lock_period": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "Indicates if the appointment is within the cancellation lock period."
          },
          "deleted_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "A deleted date and time (ISO 8601 format) for when we use a filter to get changed appointments. ",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          },
          "requires_confirmation": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "Indicates if the appointment requires confirmation."
          },
          "late_cancellation_fee": {
            "type": "array",
            "description": "The late cancellation fee for the appointment.",
            "items": {
              "type": "object",
              "description": "A key-value pair of late cancellation fee data.",
              "additionalProperties": false
            }
          },
          "updated_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date and time (ISO 8601 format) when the appointment was last updated.",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          },
          "company_team_members": {
            "type": "array",
            "description": "The team members associated with the appointment.",
            "items": {
              "$ref": "#/components/schemas/CompanyTeamMember"
            }
          },
          "appointment_attendances": {
            "type": "array",
            "description": "The attendances associated with the appointment.",
            "items": {
              "$ref": "#/components/schemas/AppointmentAttendance"
            }
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false
      },
      "Listing": {
        "title": "Listing",
        "type": "object",
        "description": "A real estate listing.",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 7,
            "maxLength": 7,
            "enum": [
              "LISTING"
            ],
            "example": "LISTING",
            "description": "A canonical value representing a resource."
          },
          "id": {
            "type": "string",
            "description": "ID of the entity. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "mls_number": {
            "type": [
              "string",
              "null"
            ],
            "description": "The identifier for a listing on its local MLS. ",
            "minLength": 1,
            "maxLength": 100,
            "example": "1850209"
          },
          "type": {
            "type": [
              "string",
              "null"
            ],
            "example": "RESIDENTIAL",
            "description": "General type of the listing, primarily categorizing its use case. Examples include residential and commercial. ",
            "minLength": 1,
            "maxLength": 100,
            "enum": [
              "BUSINESS_OPPORTUNITY",
              "COMMERCIAL_LEASE",
              "COMMERCIAL_SALE",
              "FARM",
              "LAND",
              "MANUFACTURED_IN_PARK",
              "RESIDENTIAL",
              "RESIDENTIAL_INCOME",
              "RESIDENTIAL_LEASE"
            ]
          },
          "sub_type": {
            "type": [
              "string",
              "null"
            ],
            "example": "SINGLE_FAMILY_RESIDENCE",
            "description": "Further specifies the listing type. Examples include family residence and condominium.",
            "minLength": 1,
            "maxLength": 100,
            "enum": [
              "APARTMENT",
              "CONDOMINIUM",
              "DUPLEX",
              "FARM",
              "SINGLE_FAMILY_RESIDENCE",
              "TIMESHARE",
              "TOWNHOUSE",
              "OFFICE"
            ]
          },
          "status": {
            "type": [
              "string",
              "null"
            ],
            "example": "COMING_SOON",
            "description": "Local, regional, or otherwise custom status for the listing used by the parties involved in the listing transaction. While variable, these statuses are typically mapped to the listing's standard status.",
            "minLength": 1,
            "maxLength": 100,
            "enum": [
              "DRAFT",
              "COMING_SOON",
              "FOR_SALE",
              "FOR_LEASE",
              "PENDING_SALE",
              "PENDING_LEASE",
              "SOLD",
              "LEASED",
              "OFF_MARKET"
            ]
          },
          "standard_status": {
            "type": [
              "string",
              "null"
            ],
            "example": "COMING_SOON",
            "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer, including Active, Active Under Contract, Canceled, Closed, Expired, Pending, and Withdrawn.",
            "minLength": 1,
            "maxLength": 100,
            "enum": [
              "ACTIVE",
              "ACTIVE_UNDER_CONTRACT",
              "CANCELED",
              "CLOSED",
              "COMING_SOON",
              "DELETE",
              "EXPIRED",
              "HOLD",
              "INCOMPLETE",
              "PENDING",
              "WITHDRAWN"
            ]
          },
          "thumbnail_url": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 1,
            "maxLength": 65536,
            "example": "https://picsum.photos/640/480",
            "description": "A URL for a thumbnail representing the listing."
          },
          "large_thumbnail_url": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 1,
            "maxLength": 65536,
            "example": "https://picsum.photos/1280/960",
            "description": "A URL for a large thumbnail representing the listing."
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Description of the selling points of the building and/or land for sale. ",
            "example": "There are technically no designated parking spots; however, the driveway, on the back of the house, can easily park 3 standard-sized vehicles.",
            "minLength": 1,
            "maxLength": 65535
          },
          "lot": {
            "$ref": "#/components/schemas/ListingLot"
          },
          "building": {
            "$ref": "#/components/schemas/ListingBuilding"
          },
          "price": {
            "$ref": "#/components/schemas/ListingPrice"
          },
          "list_agent": {
            "$ref": "#/components/schemas/Group"
          },
          "co_list_agent": {
            "$ref": "#/components/schemas/Group"
          },
          "customer_team_memberships": {
            "type": "array",
            "description": "customer_team_memberships",
            "items": {
              "$ref": "#/components/schemas/CustomerTeamMembership"
            }
          },
          "images": {
            "type": "array",
            "description": "images",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "videos": {
            "type": "array",
            "description": "videos",
            "items": {
              "$ref": "#/components/schemas/Video"
            }
          },
          "floor_plans": {
            "type": "array",
            "description": "floor_plans",
            "items": {
              "$ref": "#/components/schemas/FloorPlan"
            }
          },
          "interactive_content": {
            "type": "array",
            "description": "interactive_content",
            "items": {
              "$ref": "#/components/schemas/InteractiveContent"
            }
          },
          "property_website": {
            "$ref": "#/components/schemas/PropertyWebsite"
          },
          "marketing_materials": {
            "type": "array",
            "description": "Marketing materials for this listing. ",
            "items": {
              "$ref": "#/components/schemas/MarketingMaterial"
            }
          },
          "orders": {
            "type": "array",
            "description": "orders",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "appointments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Appointment"
            }
          },
          "unconfirmed_appointments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Appointment"
            }
          },
          "downloads_enabled": {
            "type": "boolean",
            "description": "Are downloads enabled for this listing?",
            "example": true
          },
          "is_showcase": {
            "type": "boolean",
            "description": "Indicates if this is a Showcase listing",
            "example": true
          },
          "is_showcasable": {
            "type": "boolean",
            "description": "Indicates if this listing can be showcased",
            "example": true
          },
          "has_high_resolution_images": {
            "type": "boolean",
            "description": "Indicates if this listing has high resolution images",
            "example": true
          },
          "has_zillow_imx_tour": {
            "type": "boolean",
            "description": "Indicates if this listing has a Zillow IMX tour",
            "example": true
          },
          "delivery_status": {
            "type": [
              "string",
              "null"
            ],
            "example": "DELIVERED",
            "description": "The delivery status of the listing.",
            "minLength": 1,
            "maxLength": 100,
            "enum": [
              "DELIVERED",
              "UNDELIVERED",
              "SCHEDULED"
            ]
          }
        },
        "required": [
          "object",
          "id",
          "address",
          "downloads_enabled"
        ],
        "additionalProperties": false
      },
      "PromotionCode": {
        "title": "PromotionCode",
        "type": "object",
        "description": "A Promotion Code represents a customer-redeemable code for a coupon.",
        "properties": {
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "description": "ID of the entity. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid"
          },
          "code": {
            "type": "string",
            "description": "The customer-facing code. This code must be unique across all active promotion codes.",
            "example": "SPRING_SALE",
            "minLength": 0,
            "maxLength": 255
          },
          "times_redeemed": {
            "type": "integer",
            "description": "The number of times the coupon has been redeemed.",
            "example": 10
          },
          "start_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date and time (ISO 8601 format) when the promotion code will be active.",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          },
          "end_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date and time (ISO 8601 format) when the promotion code will no longer be active.",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          },
          "max_redemptions": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The maximum number of times the promotion code can be redeemed.",
            "example": 10
          },
          "max_redemptions_per_customer": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The maximum number of times the promotion code can be redeemed per customer.",
            "example": 10
          },
          "first_time_only": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates if the promotion code can only be redeemed once per customer.",
            "example": true
          },
          "minimum_amount": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The minimum amount that must be in the cart before the promotion code can be applied.",
            "example": 1000
          },
          "is_portal_mobile_app_only": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates if the promotion code can only be redeemed on the portal mobile app.",
            "example": true
          }
        },
        "required": [
          "id",
          "code"
        ],
        "additionalProperties": false
      },
      "ProductVariant": {
        "title": "ProductVariant",
        "type": "object",
        "description": "A variant of a product.",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 15,
            "maxLength": 15,
            "enum": [
              "PRODUCT_VARIANT"
            ],
            "example": "PRODUCT_VARIANT",
            "description": "A canonical value representing a resource."
          },
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "description": "ID of the entity. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "description": "The title of the product variant.",
            "example": "House photos",
            "minLength": 0,
            "maxLength": 255
          },
          "price": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the price of the product variant.",
            "example": 10000,
            "minimum": 0
          },
          "price_amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the price of the product variant.",
            "example": 10000,
            "minimum": 0
          },
          "base_price_amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the price of the product variant.",
            "example": 10000,
            "minimum": 0
          },
          "base_is_hidden": {
            "type": "boolean",
            "description": "Indicates if the base price of the product variant is hidden.",
            "example": true
          },
          "display_original_price": {
            "type": "boolean",
            "description": "Indicates if the original price of the product variant should be displayed.",
            "example": true
          },
          "duration": {
            "type": "integer",
            "example": 60,
            "description": "The duration of the product item, in minutes.",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "title"
        ],
        "additionalProperties": false
      },
      "ProductCategory": {
        "title": "ProductCategory",
        "type": "object",
        "description": "A category for products.",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 16,
            "maxLength": 16,
            "enum": [
              "PRODUCT_CATEGORY"
            ],
            "example": "PRODUCT_CATEGORY",
            "description": "A canonical value representing a resource."
          },
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "description": "ID of the entity. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "description": "The title of the product category.",
            "example": "Photography",
            "minLength": 0,
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "The name of the product category.",
            "example": "Photography",
            "minLength": 0,
            "maxLength": 255
          },
          "slug": {
            "type": "string",
            "description": "The slug of the product category.",
            "example": "photography",
            "minLength": 0,
            "maxLength": 255
          },
          "color": {
            "type": "string",
            "description": "The color of the product category.",
            "example": "#000000",
            "minLength": 0,
            "maxLength": 255
          },
          "type": {
            "type": "string",
            "description": "The type of the product category.",
            "example": "product",
            "minLength": 0,
            "maxLength": 255
          }
        },
        "required": [
          "id",
          "title"
        ],
        "additionalProperties": false
      },
      "DiscountableItem": {
        "title": "DiscountableItem",
        "type": "object",
        "description": "A discountable item.",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "PRODUCT",
            "description": "A canonical value representing a resource."
          },
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "description": "ID of the entity. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "description": "The title of the item.",
            "example": "House photos",
            "minLength": 0,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "The description of the item.",
            "example": "Capture photos of a house for sale.",
            "minLength": 0,
            "maxLength": 65536
          },
          "active": {
            "type": "boolean",
            "description": "The active status of an item.",
            "example": true
          },
          "type": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "The type of item.",
            "example": "MAIN"
          },
          "is_twilight": {
            "type": "boolean",
            "description": "Whether the item is available during twilight hours.",
            "example": true
          },
          "image_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "A URL for an example property image.",
            "example": "https://picsum.photos/400/200",
            "minLength": 0,
            "maxLength": 65536,
            "format": "uri"
          },
          "is_serviceable": {
            "type": "boolean",
            "description": "Whether the item is serviceable.",
            "example": true
          },
          "requires_separate_booking": {
            "type": "boolean",
            "description": "Whether the item requires a separate booking.",
            "example": true
          },
          "always_display_addons": {
            "type": "boolean",
            "description": "Whether to always display addons for the item.",
            "example": true
          },
          "variant_filter_type": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "description": "The type of variant filter.",
            "example": "ALL"
          },
          "avalara_tax_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "The Avalara tax code for the item.",
            "minLength": 0,
            "maxLength": 255,
            "example": "12345"
          },
          "limit_quantity_amount": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The limit quantity amount for the item.",
            "example": 10
          },
          "limit_quantity": {
            "type": "boolean",
            "description": "Whether the item has a limit quantity.",
            "example": true
          },
          "is_filterable": {
            "type": "boolean",
            "description": "Whether the item is filterable.",
            "example": true
          },
          "is_esoft_adjustment": {
            "type": "boolean",
            "description": "Whether the item is an eSoft adjustment.",
            "example": true
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariant"
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductCategory"
            }
          },
          "quickbooks_item_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The Quickbooks item ID for the item.",
            "example": "12345",
            "minLength": 0,
            "maxLength": 65536
          },
          "amount": {
            "type": "number",
            "description": "The amount of the item.",
            "example": 100
          },
          "name": {
            "type": "string",
            "description": "The name of the item.",
            "example": "Flat Fee",
            "minLength": 0,
            "maxLength": 65536
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false
      },
      "Discountable": {
        "title": "Discountable",
        "type": "object",
        "description": "A discountable maps a coupon to a product or fee the coupon should exclusively apply to. ",
        "properties": {
          "object": {
            "type": "string",
            "description": "String representing the object\u2019s type. Objects of the same type share the same schema.",
            "example": "DISCOUNTABLE",
            "minLength": 1,
            "maxLength": 100
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the entity. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid"
          },
          "discountable": {
            "$ref": "#/components/schemas/DiscountableItem"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false
      },
      "Coupon": {
        "title": "Coupon",
        "type": "object",
        "description": "A coupon contains information about a percent-off or amount-off discount you might want to apply to an order.",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the entity. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of the coupon displayed to customers on orders.",
            "example": "VIP Customer Discount",
            "minLength": 0,
            "maxLength": 255
          },
          "is_active": {
            "type": "boolean",
            "description": "Indicates if the coupon is currently active.",
            "example": true
          },
          "is_percent_off": {
            "type": "boolean",
            "description": "Indicates if the coupon is a percent off coupon.",
            "example": true
          },
          "percent_off": {
            "type": "number",
            "description": "A decimal value representing the percent that will be taken off the subtotal of an order this coupon is applied to. For example, 0.500 would represent an applied discount of 50%, meaning an order with a subtotal of $100 would result in a balance of $50.",
            "format": "float",
            "example": 0.075,
            "minimum": 0,
            "maximum": 1
          },
          "amount_off": {
            "type": "integer",
            "description": "Amount that will be taken off the subtotal of any orders this coupon is applied to. Amount represented in the smallest currency unit (that is, 100 cents for $1.00).",
            "example": 2500
          },
          "amount_off_formatted": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "The amount off formatted as a string.",
            "example": "$25.00"
          },
          "promotion_codes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PromotionCode"
            }
          },
          "discountables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Discountable"
            }
          },
          "times_redeemed": {
            "type": "integer",
            "description": "The number of times the coupon has been redeemed.",
            "example": 10
          },
          "created_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date and time (ISO 8601 format) when the order was created.",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false
      },
      "Discount": {
        "title": "Discount",
        "type": "object",
        "description": "A discount represents the application of a coupon to an order or order item. It includes the calculated amount to be discounted based on the coupon configuration.",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 8,
            "maxLength": 8,
            "enum": [
              "DISCOUNT"
            ],
            "example": "DISCOUNT",
            "description": "A canonical value representing a resource."
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the entity. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid"
          },
          "total_discount_amount": {
            "type": "integer",
            "description": "The total discount amount.",
            "example": 1000
          },
          "coupon": {
            "$ref": "#/components/schemas/Coupon"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false
      },
      "Tag": {
        "title": "Tag",
        "type": "object",
        "description": "A label attached to something for the purpose of identification or categorization.",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 19,
            "maxLength": 19,
            "enum": [
              "APP\\TAGS\\MODELS\\TAG"
            ],
            "example": "APP\\TAGS\\MODELS\\TAG",
            "description": "A canonical value representing a resource."
          },
          "id": {
            "type": "string",
            "description": "ID. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          },
          "name": {
            "type": "string",
            "description": "The name of the tag.",
            "example": "Photography",
            "minLength": 1,
            "maxLength": 255
          },
          "slug": {
            "type": "string",
            "description": "The slug of the tag.",
            "example": "photography",
            "minLength": 1,
            "maxLength": 255
          },
          "color": {
            "type": "string",
            "description": "The background color of the tag.",
            "example": "#8BC34A",
            "minLength": 7,
            "maxLength": 7
          },
          "font_color": {
            "type": "string",
            "description": "The font color of the tag.",
            "example": "#FFFFFF",
            "minLength": 7,
            "maxLength": 7
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "color",
          "font_color"
        ],
        "additionalProperties": false
      },
      "DiscountAmount": {
        "title": "DiscountAmount",
        "type": "object",
        "description": "A discount amount.",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 35,
            "maxLength": 35,
            "enum": [
              "APP\\DISCOUNTS\\MODELS\\DISCOUNTAMOUNT"
            ],
            "example": "APP\\DISCOUNTS\\MODELS\\DISCOUNTAMOUNT",
            "description": "A canonical value representing a resource."
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the entity. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid"
          },
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "amount": {
            "type": "integer",
            "example": 2999,
            "description": "The amount of discount that was applied"
          },
          "applied_percent_off": {
            "example": 0.2,
            "type": [
              "number",
              "null"
            ],
            "minimum": 0,
            "maximum": 1,
            "description": "Representation of percent off ranging from 0 to 1"
          },
          "applied_amount_off": {
            "description": "Amount discounted in cents",
            "example": 2500,
            "type": [
              "integer",
              "null"
            ]
          },
          "created_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date and time (ISO 8601 format) when the order was created.",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "additionalProperties": false
      },
      "Product": {
        "title": "Product",
        "type": "object",
        "description": "A product available for purchase via an order.",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 7,
            "maxLength": 7,
            "enum": [
              "PRODUCT"
            ],
            "example": "PRODUCT",
            "description": "A canonical value representing a resource."
          },
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "description": "ID of the entity. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "description": "The title of the product.",
            "example": "House photos",
            "minLength": 0,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "The description of the product.",
            "example": "Capture photos of a house for sale.",
            "minLength": 0,
            "maxLength": 65536
          },
          "active": {
            "type": "boolean",
            "description": "The active status of a product.",
            "example": true
          },
          "type": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "The type of product.",
            "enum": [
              "MAIN",
              "ADDON"
            ],
            "example": "MAIN"
          },
          "is_twilight": {
            "type": "boolean",
            "description": "Whether the product is available during twilight hours.",
            "example": true
          },
          "image_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "A URL for an example property image.",
            "example": "https://picsum.photos/400/200",
            "minLength": 0,
            "maxLength": 65536,
            "format": "uri"
          },
          "is_serviceable": {
            "type": "boolean",
            "description": "Whether the product is serviceable.",
            "example": true
          },
          "requires_separate_booking": {
            "type": "boolean",
            "description": "Whether the product requires a separate booking.",
            "example": true
          },
          "always_display_addons": {
            "type": "boolean",
            "description": "Whether to always display addons for the product.",
            "example": true
          },
          "variant_filter_type": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "description": "The type of variant filter.",
            "example": "ALL"
          },
          "avalara_tax_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "The Avalara tax code for the product.",
            "minLength": 0,
            "maxLength": 255,
            "example": "12345"
          },
          "limit_quantity_amount": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The limit quantity amount for the product.",
            "example": 10
          },
          "limit_quantity": {
            "type": "boolean",
            "description": "Whether the product has a limit quantity.",
            "example": true
          },
          "is_filterable": {
            "type": "boolean",
            "description": "Whether the product is filterable.",
            "example": true
          },
          "is_esoft_adjustment": {
            "type": "boolean",
            "description": "Whether the product is an eSoft adjustment.",
            "example": true
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariant"
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductCategory"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductCategory"
            }
          }
        },
        "required": [
          "id",
          "title",
          "type"
        ],
        "additionalProperties": false
      },
      "TaxRate": {
        "title": "TaxRate",
        "type": "object",
        "description": "A tax rate represents the percentage of tax that should be applied to a taxed entity.",
        "properties": {
          "object": {
            "type": "string",
            "description": "String representing the object's type.",
            "minLength": 0,
            "maxLength": 255,
            "example": "TAX_RATE"
          },
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "description": "ID of the entity. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of the tax.",
            "example": "New York State Tax",
            "minLength": 0,
            "maxLength": 255
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "The description of the tax rate.",
            "example": "Tax rate applied for any property that falls within the bounds New York State.",
            "minLength": 0,
            "maxLength": 65536
          },
          "applied_rate": {
            "type": "number",
            "format": "float",
            "example": 0.075,
            "minimum": 0,
            "maximum": 1,
            "description": "A decimal value representing the rate that should be applied to a taxed entity. For example, 0.075 would represent an applied tax percentage of 7.5%."
          },
          "rate": {
            "type": [
              "string",
              "null"
            ],
            "description": "A decimal value representing the rate that should be applied to a taxed entity. For example, 0.075 would represent an applied tax percentage of 7.5%.",
            "minLength": 0,
            "maxLength": 255,
            "example": "0.075000"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the tax rate is active.",
            "example": true
          },
          "is_inclusive": {
            "type": "boolean",
            "description": "Whether the tax rate is inclusive.",
            "example": true
          }
        },
        "required": [
          "object",
          "id"
        ],
        "additionalProperties": false
      },
      "Tax": {
        "title": "Tax",
        "type": "object",
        "description": "A tax represents the application of a tax rate to a taxed entity, such as an order or order item.",
        "properties": {
          "object": {
            "type": "string",
            "description": "String representing the object's type.",
            "minLength": 0,
            "maxLength": 255,
            "example": "TAX"
          },
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "description": "ID of the entity. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid"
          },
          "total_tax_amount": {
            "type": "integer",
            "example": 2099,
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the total calculated tax for this tax rate for all applicable order items.",
            "minimum": 0
          },
          "applied_rate": {
            "type": "number",
            "format": "float",
            "example": 0.075,
            "minimum": 0,
            "maximum": 1,
            "description": "A decimal value representing the rate of the parent tax rate at the time of this tax application. For example, 0.075 would represent an applied tax percentage of 7.5%."
          },
          "tax_rate": {
            "$ref": "#/components/schemas/TaxRate"
          }
        },
        "required": [
          "object",
          "id"
        ],
        "additionalProperties": false
      },
      "Task": {
        "title": "Task",
        "type": "object",
        "description": "A task is a single unit of work that can be assigned to a user.",
        "properties": {
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "description": "ID of the entity. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of the task.",
            "example": "Complete 41 Drone Shots, Variant corporis",
            "minLength": 0,
            "maxLength": 255
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Detailed description of the task",
            "example": "Complete 41 Drone Shots, Variant corporis",
            "minLength": 0,
            "maxLength": 65536
          },
          "quantity": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Number of items or units for this task",
            "example": 1
          },
          "pay_run_item_amount": {
            "type": [
              "number",
              "null"
            ],
            "description": "Payment amount associated with this task",
            "example": 10000
          },
          "due_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "Deadline for task completion",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          },
          "completed_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "When the task was completed",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          },
          "is_completed": {
            "type": "boolean",
            "description": "Flag indicating whether the task is completed",
            "example": true
          }
        },
        "required": [
          "id",
          "name",
          "is_completed"
        ],
        "additionalProperties": false
      },
      "OrderItem": {
        "title": "OrderItem",
        "type": "object",
        "description": "An individual service or charge of an order. Order items can capture products serviced by or fees applied to an order. ",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 10,
            "maxLength": 10,
            "enum": [
              "ORDER_ITEM"
            ],
            "example": "ORDER_ITEM",
            "description": "A canonical value representing a resource."
          },
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "description": "ID of the entity. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "description": "The title of the item.",
            "example": "Aerial Video",
            "minLength": 0,
            "maxLength": 255
          },
          "subtitle": {
            "type": "string",
            "description": "The sub title of the item.",
            "example": "10 minute video",
            "minLength": 0,
            "maxLength": 255
          },
          "sub_title": {
            "type": "string",
            "description": "The sub title of the item.",
            "example": "10 minute video",
            "minLength": 0,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "The description of the item.",
            "example": "A fly-by drone video of the property.",
            "minLength": 0,
            "maxLength": 255
          },
          "purchasable_type": {
            "type": "string",
            "description": "The type of order item.",
            "enum": [
              "PRODUCT_VARIANT",
              "FEE",
              "CUSTOM"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "FEE"
          },
          "amount": {
            "type": "integer",
            "example": 2099,
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the cost of a single instance of this item. This is multiplied by the quantity to calculate what was or will be charged. Legacy version of unit_price_amount.",
            "minimum": 0
          },
          "unit_price_amount": {
            "type": "integer",
            "example": 2099,
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the cost of a single instance of this item. This is multiplied by the quantity to calculate what was or will be charged.",
            "minimum": 0
          },
          "quantity": {
            "type": "integer",
            "example": 2,
            "description": "A positive integer representing the number of instances of this item that was or will be serviced.",
            "minimum": 0
          },
          "gross_total_amount": {
            "type": "integer",
            "example": 4198,
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the total cost of this item (before discounts and taxes have been applied) to be charge.",
            "minimum": 0
          },
          "appointment": {
            "$ref": "#/components/schemas/Appointment"
          },
          "discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountAmount"
            }
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "product_variant": {
            "$ref": "#/components/schemas/ProductVariant"
          },
          "taxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tax"
            }
          },
          "is_serviceable": {
            "type": "boolean",
            "description": "Whether the order item is serviceable.",
            "example": true
          },
          "tasks": {
            "type": "array",
            "description": "The tasks associated with the order item.",
            "items": {
              "$ref": "#/components/schemas/Task"
            }
          },
          "is_canceled": {
            "type": "boolean",
            "description": "Whether the order item is canceled.",
            "example": true
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false
      },
      "BookingLimits": {
        "title": "BookingLimits",
        "type": "object",
        "description": "Booking limits and scheduling configuration",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 7,
            "maxLength": 7,
            "enum": [
              "COMPANY"
            ],
            "example": "COMPANY",
            "description": "A canonical value representing a resource."
          },
          "use_territory_awareness": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "Indicates if the order form by default uses territories to filter available users and products."
          },
          "availability_style": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "TIME",
            "description": "The scheduling style the order form should use for timeslot selection by default.",
            "enum": [
              "TIME",
              "TIME_OF_DAY",
              "LEGACY",
              "DATETIME_PICKER"
            ]
          },
          "slot_interval_minutes": {
            "type": [
              "integer",
              "null"
            ],
            "example": 60,
            "description": "How frequently slotted available times are on the order form by default."
          },
          "use_automated_user_assignment": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "Indicates if the order form uses auto-assignment of users to appointments."
          },
          "automated_user_assignment_strategy": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "RECOMMENDED",
            "description": "The default assignment strategy the order form should use to assign users to appointments, if applicable.",
            "enum": [
              "RECOMMENDED",
              "HOURS_PRIORITY",
              "DISTANCE",
              "ROUND_ROBIN",
              "PRIORITY_LIST"
            ]
          },
          "show_user_names": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "Indicates if the order form by default should display user's names after they have been assigned to an appointment."
          },
          "use_instant_appointment_scheduling": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "Indicates if the order form by default instantly schedules appointments as soon as the order is placed."
          },
          "is_twilight_visible": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Whether twilight hours are visible",
            "example": true
          }
        },
        "required": [
          "object",
          "use_territory_awareness",
          "availability_style",
          "slot_interval_minutes",
          "use_automated_user_assignment",
          "automated_user_assignment_strategy",
          "show_user_names",
          "use_instant_appointment_scheduling",
          "is_twilight_visible"
        ],
        "additionalProperties": false
      },
      "Payment": {
        "title": "Payment",
        "description": "A payment is a single unit of payment that can be applied to an order.",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 13,
            "maxLength": 13,
            "enum": [
              "ORDER_PAYMENT"
            ],
            "example": "ORDER_PAYMENT",
            "description": "A canonical value representing a resource."
          },
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "description": "ID of the entity. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "description": "Payment type",
            "minLength": 0,
            "maxLength": 255,
            "example": "MANUAL",
            "enum": [
              "MANUAL",
              "CREDIT",
              "CHECKOUT"
            ]
          },
          "collection_source": {
            "type": "string",
            "description": "Source of payment collection",
            "minLength": 0,
            "maxLength": 255,
            "example": "CASH",
            "enum": [
              "PAYPAL",
              "VENMO",
              "STRIPE",
              "SQUARE",
              "QUICKBOOKS",
              "CONCIERGE",
              "CASH",
              "CHECK",
              "OTHER"
            ]
          },
          "completed_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "Timestamp when the payment was completed",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          },
          "applicable_amount": {
            "type": "integer",
            "description": "The applicable amount for the payment",
            "example": 502
          },
          "tip_amount": {
            "type": "integer",
            "description": "The tip amount included in the payment",
            "example": 100
          },
          "total_amount": {
            "type": "integer",
            "description": "The total payment amount",
            "example": 502
          },
          "collected_amount": {
            "type": "integer",
            "description": "The amount actually collected",
            "example": 502
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          }
        },
        "required": [
          "object",
          "id",
          "type",
          "collection_source",
          "completed_at",
          "applicable_amount",
          "tip_amount",
          "total_amount",
          "collected_amount"
        ],
        "additionalProperties": false
      },
      "CompanyTeamMemberPermission": {
        "title": "CompanyTeamMemberPermission",
        "type": "object",
        "description": "A permission for a team member of a company.",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 10,
            "maxLength": 10,
            "enum": [
              "PERMISSION"
            ],
            "example": "PERMISSION",
            "description": "A canonical value representing a resource."
          },
          "name": {
            "type": "string",
            "description": "The name of the permission",
            "example": "ACTIVITY_LOG_VIEW",
            "minLength": 0,
            "maxLength": 255,
            "enum": [
              "ACTIVITY_LOG_VIEW",
              "APP_STORE_VIEW_ANY",
              "APPOINTMENTS_MANAGE",
              "AVAILABILITY_VIEW_ANY",
              "CALENDAR_VIEW_ANY",
              "CUSTOMER_CREATE",
              "CUSTOMER_DELETE",
              "CUSTOMER_EXPORT_CREATE",
              "CUSTOMER_IMPORT_CREATE",
              "CUSTOMER_VIEW_ANY",
              "FEE_VIEW_ANY",
              "LISTING_CREATE",
              "LISTING_DELETE",
              "LISTING_VIEW_ANY",
              "MEDIA_REQUEST_MANAGE",
              "ORDER_AMOUNT_VIEW_ANY",
              "ORDER_FORM_VIEW_ANY",
              "ORDER_NOTES_MANAGE",
              "ORDER_VIEW_ANY",
              "ORDERS_MANAGE",
              "PAYMENT_METHODS_MANAGE",
              "PAYROLL_MANAGE",
              "PAYROLL_PERSONAL_MANAGE",
              "PAYROLL_PERSONAL_VIEW",
              "PRODUCT_VIEW_ANY",
              "REPORT_VIEW_ANY",
              "SETTINGS_MANAGE",
              "TAX_VIEW_ANY",
              "TERRITORY_VIEW_ANY",
              "ZILLOW_MEDIA_EXCLUSIVES_MANAGE"
            ]
          }
        },
        "required": [
          "object",
          "name"
        ],
        "additionalProperties": false
      },
      "CompanyTeamMember": {
        "title": "CompanyTeamMember",
        "type": "object",
        "description": "A team member of a company.",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 19,
            "maxLength": 19,
            "enum": [
              "COMPANY_TEAM_MEMBER"
            ],
            "example": "COMPANY_TEAM_MEMBER",
            "description": "A canonical value representing a resource."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of the entity. UUID Version 4."
          },
          "calendar_color": {
            "type": [
              "string",
              "null"
            ],
            "description": "Color code for calendar display, if assigned",
            "example": "#FF0000",
            "minLength": 7,
            "maxLength": 7
          },
          "permissions": {
            "type": "array",
            "description": "List of permissions granted to the team member",
            "items": {
              "$ref": "#/components/schemas/CompanyTeamMemberPermission"
            }
          },
          "restrictions": {
            "type": "array",
            "description": "List of restrictions applied to the team member",
            "items": {
              "type": "object",
              "description": "A key-value pair of restriction data.",
              "additionalProperties": false
            }
          },
          "is_service_provider": {
            "type": "boolean",
            "description": "Indicates if the team member is a service provider",
            "example": true
          },
          "external_id": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 65536,
            "description": "External identifier for the team member, if any",
            "example": "1234567890"
          },
          "company_user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "object",
          "id",
          "permissions",
          "restrictions",
          "is_service_provider"
        ],
        "additionalProperties": false
      },
      "AppointmentAttendance": {
        "title": "AppointmentAttendance",
        "type": "object",
        "description": "An appointment attendance.",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 22,
            "maxLength": 22,
            "enum": [
              "APPOINTMENT_ATTENDANCE"
            ],
            "example": "APPOINTMENT_ATTENDANCE",
            "description": "A canonical value representing a resource."
          },
          "id": {
            "type": [
              "number",
              "null"
            ],
            "description": "ID of the appointment attendance.",
            "example": 1234567890,
            "minimum": 0,
            "maximum": 9.223372036854776e+18
          },
          "company_team_member": {
            "$ref": "#/components/schemas/CompanyTeamMember"
          },
          "zillow_3d_home_deep_link_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "URL to Zillow 3D home tour if available",
            "minLength": 0,
            "maxLength": 65535,
            "example": "https://aryeo.com",
            "format": "uri"
          },
          "is_requested": {
            "type": "boolean",
            "description": "Indicates if attendance was requested",
            "example": true
          },
          "accepted_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date and time (ISO 8601 format) when attendance was accepted.",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          },
          "declined_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date and time (ISO 8601 format) when attendance was declined.",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "object",
          "id",
          "company_team_member",
          "is_requested"
        ],
        "additionalProperties": false
      },
      "AppointmentCollection": {
        "title": "AppointmentCollection",
        "type": "object",
        "description": "A collection of appointments.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "type": [
              "array",
              "null"
            ],
            "description": "A collection of objects.",
            "items": {
              "$ref": "#/components/schemas/Appointment"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "AppointmentResource": {
        "title": "AppointmentResource",
        "type": "object",
        "description": "An appointment.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "$ref": "#/components/schemas/Appointment"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "AppointmentUpdatePutPayload": {
        "title": "AppointmentUpdatePutPayload",
        "type": "object",
        "description": "Payload for updating an appointment record.",
        "properties": {
          "start_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The new date and time (ISO 8601 format) when the appointment is set to start.",
            "example": "2021-06-30T20:30:00Z",
            "minLength": 20,
            "maxLength": 20,
            "format": "date-time"
          },
          "end_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The new date and time (ISO 8601 format) when the appointment is set to end.",
            "example": "2021-06-30T21:30:00Z",
            "minLength": 20,
            "maxLength": 20,
            "format": "date-time"
          },
          "user_ids": {
            "type": "array",
            "description": "Array of user IDs to attach to the appointment.",
            "items": {
              "description": "ID of a user. UUID Version 4.",
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "format": "uuid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            }
          },
          "item_ids": {
            "type": "array",
            "description": "Array of order item IDs to attach to the appointment.",
            "items": {
              "description": "ID of an order item. UUID Version 4.",
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "format": "uuid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            }
          },
          "notify": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Sends a notification to the appointment's order's customer that the appointment was canceled.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "AppointmentCancelPutPayload": {
        "title": "AppointmentCancelPutPayload",
        "type": "object",
        "description": "Payload for canceling an appointment record.",
        "properties": {
          "notify": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Sends a notification to the appointment's order's customer that the appointment was canceled.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ApiError409": {
        "type": "object",
        "title": "ApiError409",
        "description": "A conflict error returned by the API.",
        "properties": {
          "status": {
            "type": "string",
            "example": "error",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "message": {
            "type": "string",
            "description": "The error message.",
            "example": "{ApiError message.}",
            "minLength": 0,
            "maxLength": 255
          },
          "code": {
            "type": [
              "integer",
              "null"
            ],
            "description": "A numeric code corresponding to the error.",
            "example": 409
          }
        },
        "required": [
          "status",
          "message"
        ],
        "additionalProperties": false
      },
      "AppointmentReschedulePutPayload": {
        "title": "AppointmentReschedulePayload",
        "type": "object",
        "description": "Payload for rescheduling an appointment record.",
        "properties": {
          "start_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The new date and time (ISO 8601 format) when the appointment is set to start.",
            "example": "2021-06-30T20:30:00Z",
            "minLength": 20,
            "maxLength": 20,
            "format": "date-time"
          },
          "end_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The new date and time (ISO 8601 format) when the appointment is set to end.",
            "example": "2021-06-30T21:30:00Z",
            "minLength": 20,
            "maxLength": 20,
            "format": "date-time"
          },
          "notify": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Send a notification to the appointment's order's customer that the appointment was rescheduled.",
            "example": true
          }
        },
        "required": [
          "start_at",
          "end_at"
        ],
        "additionalProperties": false
      },
      "AuthEmailCheckPostPayload": {
        "type": "object",
        "title": "AuthEmailCheckPostPayload",
        "description": "An email.",
        "properties": {
          "email": {
            "type": "string",
            "description": "An email.",
            "format": "email",
            "example": "john.doe@gmail.com",
            "minLength": 0,
            "maxLength": 255
          }
        },
        "required": [
          "email"
        ],
        "additionalProperties": false
      },
      "AuthActivationStageResource": {
        "title": "AuthActivationStageResource",
        "type": "object",
        "description": "A status representing an email/user's activation stage.",
        "properties": {
          "status": {
            "type": "string",
            "example": "ACTIVE",
            "description": "A status representing an email/user's activation stage.",
            "maxLength": 255,
            "minLength": 1,
            "enum": [
              "ACTIVE",
              "INVITED",
              "NEW"
            ]
          },
          "has_admin_account": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the email is associated with an admin account."
          }
        },
        "additionalProperties": false
      },
      "CouponCollection": {
        "title": "CouponCollection",
        "type": "object",
        "description": "A collection of coupons.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "type": [
              "array",
              "null"
            ],
            "description": "A collection of objects.",
            "items": {
              "$ref": "#/components/schemas/Coupon"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "CreditTransactionResource": {
        "title": "CreditTransactionResource",
        "type": "object",
        "description": "A customer user's credit transaction",
        "properties": {
          "type": {
            "type": "string",
            "minLength": 5,
            "maxLength": 6,
            "enum": [
              "credit",
              "debit"
            ],
            "description": "The type of credit transaction",
            "example": "credit"
          },
          "amount": {
            "type": "integer",
            "minimum": 1,
            "description": "The amount in cents",
            "example": 1
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "description": "Optional description of the transaction",
            "example": "Transaction description"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of the user associated with the transaction. UUID Version 4.",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "posting_date": {
            "type": [
              "string",
              "null"
            ],
            "format": "date",
            "description": "The date the transaction was posted (YYYY-MM-DD)",
            "example": "2025-01-01"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time the transaction was created",
            "minLength": 20,
            "maxLength": 20,
            "example": "2025-01-01T20:30:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time the transaction was updated",
            "minLength": 20,
            "maxLength": 20,
            "example": "2025-01-01T20:30:00Z"
          }
        },
        "required": [
          "type",
          "amount",
          "user_id",
          "team_membership_id",
          "team_membership_type",
          "created_at",
          "updated_at"
        ],
        "additionalProperties": false
      },
      "DiscountPostPayload": {
        "title": "DiscountPostPayload",
        "type": "object",
        "description": "Payload for creating a discount.",
        "properties": {
          "order_id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the order apply this coupon to. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "coupon_id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the coupon to apply. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "coupon_data": {
            "type": "object",
            "description": "Data to construct an ad hoc coupon inline to apply to this order. If you create a coupon upfront, pass the coupon_id parameter. Otherwise, this coupon_data will be used to scaffold a new ad hoc Coupon.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the coupon displayed to customers on orders.",
                "example": "VIP Customer Discount",
                "minLength": 0,
                "maxLength": 255
              },
              "percent_off": {
                "type": "number",
                "description": "A decimal value representing the percent that will be taken off the subtotal of an order this coupon is applied to. For example, 0.500 would represent an applied discount of 50%, meaning an order with a subtotal of $100 would result in a balance of $50. Required if amount_off is null.",
                "format": "float",
                "example": 0.075,
                "minimum": 0,
                "maximum": 1
              },
              "amount_off": {
                "type": "integer",
                "description": "Amount that will be taken off the subtotal of any orders this coupon is applied to. Amount represented in the smallest currency unit (that is, 100 cents for $1.00). Required if percent_off is null.",
                "example": 2500
              }
            },
            "additionalProperties": false
          }
        },
        "required": [
          "order_id"
        ],
        "additionalProperties": false
      },
      "DiscountResource": {
        "title": "DiscountResource",
        "type": "object",
        "description": "A discount. ",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "$ref": "#/components/schemas/Discount"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "Dots": {
        "title": "Dots",
        "type": "object",
        "description": "The number of appointments of a certain type on a specific date.",
        "additionalProperties": {
          "type": "object",
          "description": "The number of appointments by status.",
          "properties": {
            "object": {
              "type": "string",
              "minLength": 9,
              "maxLength": 9,
              "enum": [
                "DOT_COUNT"
              ],
              "example": "DOT_COUNT",
              "description": "A canonical value representing a resource."
            },
            "scheduled": {
              "type": "integer",
              "description": "The number of scheduled appointments on this date.",
              "example": 1
            },
            "unscheduled": {
              "type": "integer",
              "description": "The number of unscheduled appointments on this date.",
              "example": 2
            },
            "cancelled": {
              "type": "integer",
              "description": "The number of cancelled appointments on this date.",
              "example": 3
            }
          },
          "additionalProperties": false
        }
      },
      "DotsResource": {
        "title": "DotsResource",
        "type": "object",
        "description": "Dots representing appointments grouped by date.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "$ref": "#/components/schemas/Dots"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "ForgotPasswordPostPayload": {
        "title": "ForgotPasswordPostPayload",
        "type": "object",
        "description": "Payload for submitting a request to reset a forgotten password for a given user's email.",
        "properties": {
          "company_id": {
            "type": "string",
            "description": "If signing in as a customer user, the ID of company to request a password reset for.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 0,
            "maxLength": 255,
            "example": "john.doe@gmail.com",
            "description": "Email."
          }
        },
        "required": [
          "email"
        ],
        "additionalProperties": false
      },
      "ApiSuccess2xx": {
        "type": "object",
        "title": "ApiSuccess2xx",
        "description": "A generic success response returned by the API.",
        "properties": {
          "status": {
            "type": "string",
            "example": "error",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "AryeoGoConfig": {
        "title": "AryeoGoConfig",
        "type": "object",
        "description": "Configuration parameters for Aryeo Go app.",
        "properties": {
          "object": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "description": "A canonical value representing a resource.",
            "example": "ARYEO_GO_CONFIG"
          },
          "version_minimum": {
            "type": "string",
            "description": "The minimum version of the app which should be installed on a user's device.",
            "example": "2.0.0",
            "minLength": 1,
            "maxLength": 65535
          },
          "version_latest_android": {
            "type": [
              "string",
              "null"
            ],
            "description": "The latest released Android version for Aryeo Go.",
            "example": "2.0.0",
            "minLength": 1,
            "maxLength": 65535
          },
          "version_latest_ios": {
            "type": [
              "string",
              "null"
            ],
            "description": "The latest released iOS version for Aryeo Go.",
            "example": "2.0.0",
            "minLength": 1,
            "maxLength": 65535
          }
        },
        "additionalProperties": false
      },
      "AryeoGoConfigResource": {
        "title": "AryeoGoConfigResource",
        "type": "object",
        "description": "The Aryeo Go app config.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "$ref": "#/components/schemas/AryeoGoConfig"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "GroupCollection": {
        "title": "GroupCollection",
        "type": "object",
        "description": "A collection of groups.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "type": [
              "array",
              "null"
            ],
            "description": "A collection of objects.",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "GroupResource": {
        "title": "GroupResource",
        "type": "object",
        "description": "A group.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "$ref": "#/components/schemas/Group"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "ListingCollection": {
        "title": "ListingCollection",
        "type": "object",
        "description": "A collection of listings.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "type": [
              "array",
              "null"
            ],
            "description": "A collection of objects.",
            "items": {
              "$ref": "#/components/schemas/Listing"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "ListingPostPayload": {
        "title": "ListingPostPayload",
        "type": "object",
        "description": "Payload for creating a listing.",
        "properties": {
          "address_id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the address to associate with the listing. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "list_agent_id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the customer to associate as the listing agent on the listing. UUID Versio",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "co_list_agent_id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the customer to associate as the co-listing agent on the listing. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "order_ids": {
            "type": "array",
            "description": "IDs of the orders to associate with this listing. ",
            "items": {
              "type": "string",
              "description": "ID of the item to associate with this order.",
              "format": "uuid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000",
              "minLength": 36,
              "maxLength": 36
            }
          },
          "sections": {
            "type": "object",
            "description": "Media sections to include for this listing.",
            "properties": {
              "images": {
                "type": "boolean",
                "example": true,
                "default": false,
                "description": "Include the images section when creating this listing. "
              },
              "videos": {
                "type": "boolean",
                "example": true,
                "default": false,
                "description": "Include the videos section when creating this listing. "
              },
              "floor_plans": {
                "type": "boolean",
                "example": true,
                "default": false,
                "description": "Include the floor plans section when creating this listing. "
              },
              "interactive_content": {
                "type": "boolean",
                "example": true,
                "default": false,
                "description": "Include the interactive content section when creating this listing. "
              }
            },
            "additionalProperties": false
          }
        },
        "required": [
          "address_id"
        ],
        "additionalProperties": false
      },
      "ListingResource": {
        "title": "ListingResource",
        "type": "object",
        "description": "A listing.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "$ref": "#/components/schemas/Listing"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "ListingPutPayload": {
        "title": "ListingPutPayload",
        "type": "object",
        "description": "Payload for updating a listing.",
        "properties": {
          "title": {
            "type": [
              "string",
              "null"
            ],
            "description": "The title of the listing.",
            "minLength": 0,
            "maxLength": 255,
            "example": "Must see apartment!"
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "The description of the listing.",
            "minLength": 0,
            "maxLength": 255,
            "example": "Beautiful 2 bedroom apartment in the heart of downtown"
          },
          "status": {
            "type": [
              "string",
              "null"
            ],
            "description": "The status of the listing.",
            "minLength": 0,
            "maxLength": 255,
            "example": "FOR_SALE"
          },
          "mls_live_date": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date the MLS listing will go live.",
            "format": "date",
            "minLength": 10,
            "maxLength": 10,
            "example": "2021-06-30"
          },
          "mls_number": {
            "type": [
              "string",
              "null"
            ],
            "description": "The MLS number of the listing.",
            "minLength": 0,
            "maxLength": 255,
            "example": "170598340"
          },
          "price": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The price of the listing property.",
            "example": 500000
          },
          "bedrooms": {
            "type": [
              "number",
              "null"
            ],
            "description": "A decimal value representing the number of bedrooms for the listing.",
            "format": "float",
            "example": 1.5,
            "minimum": 0,
            "maximum": 99
          },
          "bathrooms": {
            "type": [
              "number",
              "null"
            ],
            "description": "A decimal value representing the number of bathrooms for the listing.",
            "format": "float",
            "example": 1.5,
            "minimum": 0,
            "maximum": 99
          },
          "home_squarefootage": {
            "type": [
              "number",
              "null"
            ],
            "description": "A decimal value representing the square footage the listing.",
            "format": "float",
            "example": 4200,
            "minimum": 0,
            "maximum": 999999
          },
          "lot_acres": {
            "type": [
              "number",
              "null"
            ],
            "description": "A decimal value representing the acreage the listing.",
            "format": "float",
            "example": 4200,
            "minimum": 0,
            "maximum": 9999
          },
          "parking_spots": {
            "type": [
              "number",
              "null"
            ],
            "description": "A decimal value representing the number of parking spots for the listing.",
            "format": "float",
            "example": 2,
            "minimum": 0,
            "maximum": 999
          },
          "year_built": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The year the house for the listing was built.",
            "example": 1980,
            "minimum": 1500
          },
          "property_type": {
            "type": [
              "string",
              "null"
            ],
            "description": "The type of the listing.",
            "minLength": 0,
            "maxLength": 255,
            "example": "SINGLE_FAMILY"
          },
          "is_showcase": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates if this is a Showcase listing",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ListingPutShowcasePayload": {
        "title": "ListingPutShowcasePayload",
        "type": "object",
        "description": "Payload for updating a listing showcase designation.",
        "properties": {
          "is_showcase": {
            "type": "boolean",
            "example": true,
            "description": "Is this listing a showcase listing?"
          }
        },
        "additionalProperties": false
      },
      "LoginPostPayload": {
        "type": "object",
        "title": "LoginPostPayload",
        "description": "A user's email, password, and client type.",
        "properties": {
          "company_id": {
            "type": "string",
            "description": "If signing in as a customer user, the ID of company to sign in under.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "email": {
            "type": "string",
            "description": "An email.",
            "format": "email",
            "example": "john.doe@gmail.com",
            "minLength": 0,
            "maxLength": 255
          },
          "password": {
            "type": "string",
            "description": "A password.",
            "example": "P@$$w0Rd",
            "minLength": 0,
            "maxLength": 255
          },
          "client": {
            "type": "string",
            "description": "The type of client.",
            "example": "IOS",
            "minLength": 1,
            "maxLength": 255,
            "enum": [
              "IOS",
              "ANDROID",
              "PHPUNIT"
            ]
          }
        },
        "required": [
          "email",
          "password",
          "client"
        ],
        "additionalProperties": false
      },
      "PersonalAccessToken": {
        "type": "object",
        "title": "PersonalAccessToken",
        "description": "A personal access token, its user, and the it's users group (if applicable).",
        "properties": {
          "object": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "description": "A canonical value representing a resource.",
            "example": "PERSONAL_ACCESS_TOKEN"
          },
          "token": {
            "type": "string",
            "minLength": 0,
            "description": "Authorization token for a user.",
            "example": "token",
            "maxLength": 8000
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "group": {
            "$ref": "#/components/schemas/Group"
          }
        },
        "required": [
          "token",
          "user"
        ],
        "additionalProperties": false
      },
      "PersonalAccessTokenResource": {
        "title": "PersonalAccessTokenResource",
        "type": "object",
        "description": "A personal access token.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "$ref": "#/components/schemas/PersonalAccessToken"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "LoginViaTokenPostPayload": {
        "type": "object",
        "title": "LoginViaTokenPostPayload",
        "description": "A client, or device, type.",
        "properties": {
          "client": {
            "type": "string",
            "description": "The type of client.",
            "example": "IOS",
            "minLength": 1,
            "maxLength": 255,
            "enum": [
              "IOS",
              "ANDROID",
              "PHPUNIT"
            ]
          }
        },
        "required": [
          "client"
        ],
        "additionalProperties": false
      },
      "MarketingMaterialStorePayload": {
        "title": "MarketingMaterialStorePayload",
        "type": "object",
        "description": "Payload for storing a marketing material record.",
        "properties": {
          "listing_id": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "The ID of the listing that the marketing material belongs to. UUID Version 4."
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Name of the marketing material",
            "example": "John's Material",
            "minLength": 0,
            "maxLength": 255
          },
          "polotno_json": {
            "type": [
              "string",
              "null"
            ],
            "description": "String representation of a polotno JSON object.",
            "minLength": 0,
            "maxLength": 99999999,
            "example": "{'width': 850, 'height': 1100}"
          },
          "app_version": {
            "type": [
              "string",
              "null"
            ],
            "example": "1.0.0",
            "minLength": 0,
            "maxLength": 255,
            "description": "The version of the MMB app used to save this record."
          },
          "template_id": {
            "type": [
              "string",
              "null"
            ],
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "The ID of the template the marketing material was created from. UUID Version 4."
          }
        },
        "required": [
          "listing_id"
        ],
        "additionalProperties": false
      },
      "MarketingMaterialResource": {
        "title": "MarketingMaterialResource",
        "type": "object",
        "description": "Marketing material.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "$ref": "#/components/schemas/MarketingMaterial"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "MarketingMaterialUpdatePayload": {
        "title": "MarketingMaterialUpdatePayload",
        "type": "object",
        "description": "Payload for updating a marketing material record.",
        "properties": {
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Name of the marketing material.",
            "example": "John's Material",
            "minLength": 0,
            "maxLength": 255
          },
          "polotno_json": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 9999999,
            "example": "{'width': 850, 'height': 1100}",
            "description": "String representation of a polotno JSON object."
          },
          "app_version": {
            "type": [
              "string",
              "null"
            ],
            "example": "1.0.0",
            "minLength": 0,
            "maxLength": 255,
            "description": "The version of the MMB app used to save this record."
          },
          "draft_polotno_json": {
            "type": [
              "string",
              "null"
            ],
            "description": "String representation of a polotno JSON object, used as the draft version of the template",
            "example": "{'width': 850, 'height': 1100}",
            "minLength": 0,
            "maxLength": 999999
          }
        },
        "additionalProperties": false
      },
      "MarketingMaterialPublishPayload": {
        "title": "MarketingMaterialPublishPayload",
        "type": "object",
        "description": "Payload for publishing a marketing material record.",
        "properties": {
          "polotno_json": {
            "type": [
              "string",
              "null"
            ],
            "description": "String representation of a polotno JSON object.",
            "minLength": 0,
            "maxLength": 99999999,
            "example": "{'width': 850, 'height': 1100}"
          }
        },
        "additionalProperties": false
      },
      "ListingMarketingContent": {
        "title": "ListingMarketingContent",
        "x-tags": [
          "marketing-materials",
          "listing"
        ],
        "type": "object",
        "description": "Marketing content for a listing (photos, floorplans, property details, etc).",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 7,
            "maxLength": 7,
            "enum": [
              "LISTING"
            ],
            "example": "LISTING",
            "description": "A canonical value representing a resource."
          },
          "id": {
            "type": "string",
            "description": "ID of the entity. UUID Version 4.",
            "format": "uuid",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "minLength": 36,
            "maxLength": 36
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "mls_number": {
            "type": [
              "string",
              "null"
            ],
            "description": "The identifier for a listing on its local MLS. ",
            "minLength": 1,
            "maxLength": 100,
            "example": "1850209"
          },
          "sub_type": {
            "type": [
              "string",
              "null"
            ],
            "example": "SINGLE_FAMILY_RESIDENCE",
            "description": "Further specifies the listing type. Examples include family residence and condominium.",
            "minLength": 1,
            "maxLength": 100,
            "enum": [
              "APARTMENT",
              "CONDOMINIUM",
              "DUPLEX",
              "FARM",
              "SINGLE_FAMILY_RESIDENCE",
              "TIMESHARE",
              "TOWNHOUSE",
              "OFFICE"
            ]
          },
          "status": {
            "type": [
              "string",
              "null"
            ],
            "example": "COMING_SOON",
            "description": "Local, regional, or otherwise custom status for the listing used by the parties involved in the listing transaction. While variable, these statuses are typically mapped to the listing's standard status.",
            "minLength": 1,
            "maxLength": 100,
            "enum": [
              "DRAFT",
              "COMING_SOON",
              "FOR_SALE",
              "FOR_LEASE",
              "PENDING_SALE",
              "PENDING_LEASE",
              "SOLD",
              "LEASED",
              "OFF_MARKET"
            ]
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Description of the selling points of the building and/or land for sale. ",
            "example": "There are technically no designated parking spots; however, the driveway, on the back of the house, can easily park 3 standard-sized vehicles.",
            "minLength": 1,
            "maxLength": 65535
          },
          "lot": {
            "$ref": "#/components/schemas/ListingLot"
          },
          "building": {
            "$ref": "#/components/schemas/ListingBuilding"
          },
          "price": {
            "$ref": "#/components/schemas/ListingPrice"
          },
          "images": {
            "type": [
              "array",
              "null"
            ],
            "description": "Photos",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "floor_plans": {
            "type": [
              "array",
              "null"
            ],
            "description": "Floorplans",
            "items": {
              "$ref": "#/components/schemas/FloorPlan"
            }
          },
          "list_agent": {
            "$ref": "#/components/schemas/Group"
          },
          "co_list_agent": {
            "$ref": "#/components/schemas/Group"
          },
          "vendor": {
            "$ref": "#/components/schemas/Group"
          },
          "customers": {
            "type": "array",
            "description": "customers",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          },
          "customer": {
            "$ref": "#/components/schemas/Group"
          },
          "company": {
            "$ref": "#/components/schemas/Group"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "ListingMarketingContentResource": {
        "title": "ListingMarketingContentResource",
        "type": "object",
        "description": "A listing's marketing content.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "$ref": "#/components/schemas/ListingMarketingContent"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "MarketingMaterialPageSize": {
        "title": "MarketingMaterialPageSize",
        "type": "object",
        "description": "A defined page size for marketing material.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of the entity. UUID Version 4."
          },
          "width": {
            "type": "integer",
            "example": 500,
            "minimum": 0,
            "maximum": 9999,
            "format": "int32",
            "description": "Width in pixels."
          },
          "height": {
            "type": "integer",
            "format": "int32",
            "example": 500,
            "minimum": 0,
            "maximum": 9999,
            "description": "Height in pixels."
          },
          "name": {
            "type": "string",
            "example": "Facebook ad",
            "minLength": 0,
            "maxLength": 255,
            "description": "Name of the page size."
          }
        },
        "required": [
          "id",
          "width",
          "height",
          "name"
        ],
        "additionalProperties": false
      },
      "MarketingMaterialPageSizeCollection": {
        "title": "MarketingMaterialPageSizeCollection",
        "type": "object",
        "description": "A collection of marketing material page sizes.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "type": [
              "array",
              "null"
            ],
            "description": "A collection of objects.",
            "items": {
              "$ref": "#/components/schemas/MarketingMaterialPageSize"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "MarketingMaterialCategory": {
        "title": "MarketingMaterialCategory",
        "type": "object",
        "description": "A marketing material category.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of the entity. UUID Version 4."
          },
          "slug": {
            "type": "string",
            "example": "flyer",
            "minLength": 0,
            "maxLength": 255,
            "description": "Slug of the category."
          },
          "name": {
            "type": "string",
            "example": "Flyer",
            "minLength": 0,
            "maxLength": 255,
            "description": "Name of the category."
          }
        },
        "required": [
          "id",
          "slug",
          "name"
        ],
        "additionalProperties": false
      },
      "MarketingMaterialTemplate": {
        "title": "MarketingMaterialTemplate",
        "type": "object",
        "description": "A template for the marketing material builder.",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 27,
            "maxLength": 27,
            "enum": [
              "MARKETING_MATERIAL_TEMPLATE"
            ],
            "example": "MARKETING_MATERIAL_TEMPLATE",
            "description": "A canonical value representing a resource."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "minLength": 36,
            "maxLength": 36,
            "description": "The ID of the template. UUID Version 4."
          },
          "name": {
            "type": "string",
            "description": "The name of the template.",
            "minLength": 0,
            "maxLength": 255,
            "example": "An example template name"
          },
          "preview_image_url": {
            "type": [
              "string",
              "null"
            ],
            "example": "https://aryeo.sfo2.cdn.digitaloceanspaces.com/marketing-material-templates/sirius-template-preview.jpg",
            "minLength": 0,
            "maxLength": 2048,
            "format": "uri",
            "description": "The URL of the image used to preview the template."
          },
          "polotno_json": {
            "$ref": "#/components/schemas/PolotnoJson"
          },
          "draft_polotno_json": {
            "$ref": "#/components/schemas/PolotnoJson"
          },
          "group": {
            "$ref": "#/components/schemas/Group"
          },
          "categories": {
            "type": [
              "array",
              "null"
            ],
            "description": "categories",
            "items": {
              "$ref": "#/components/schemas/MarketingMaterialCategory"
            }
          },
          "is_featured": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Whether the template is featured.",
            "example": true
          },
          "created_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date and time (ISO 8601 format) when the template was created.",
            "format": "date-time",
            "minLength": 27,
            "maxLength": 27,
            "example": "2025-03-07T13:59:03.000000Z"
          },
          "customer_groups": {
            "type": "array",
            "description": "The customer groups that the template is associated with.",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          }
        },
        "required": [
          "id",
          "name"
        ],
        "additionalProperties": false
      },
      "MarketingMaterialTemplateCollection": {
        "title": "MarketingMaterialTemplateCollection",
        "type": "object",
        "description": "A collection of marketing material templates.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "type": [
              "array",
              "null"
            ],
            "description": "A collection of objects.",
            "items": {
              "$ref": "#/components/schemas/MarketingMaterialTemplate"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "MarketingMaterialTemplateStorePayload": {
        "title": "MarketingMaterialTemplateStorePayload",
        "type": "object",
        "description": "Payload for storing a new marketing material template record.",
        "properties": {
          "name": {
            "type": [
              "string",
              "null"
            ],
            "example": "Example template",
            "minLength": 0,
            "maxLength": 255,
            "description": "The name of the template."
          },
          "polotno_json": {
            "type": [
              "string",
              "null"
            ],
            "description": "String representation of a polotno JSON object, used as the published version of the template.",
            "example": "{'width': 850, 'height': 1100}",
            "minLength": 0,
            "maxLength": 99999999
          },
          "draft_polotno_json": {
            "type": [
              "string",
              "null"
            ],
            "description": "String representation of a polotno JSON object, used as the draft version of the template.",
            "example": "{'width': 850, 'height': 1100}",
            "minLength": 0,
            "maxLength": 9999999
          },
          "group_id": {
            "type": [
              "string",
              "null"
            ],
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "description": "The ID of the group that the template belongs to. UUID Version 4."
          }
        },
        "additionalProperties": false
      },
      "MarketingMaterialTemplateResource": {
        "title": "MarketingMaterialTemplateResource",
        "type": "object",
        "description": "A marketing material template.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "$ref": "#/components/schemas/MarketingMaterialTemplate"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "MarketingMaterialTemplateUpdatePayload": {
        "title": "MarketingMaterialTemplateUpdatePayload",
        "type": "object",
        "description": "Payload for updating a marketing material template record.",
        "properties": {
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Name of the marketing material template.",
            "example": "John's Template",
            "minLength": 0,
            "maxLength": 255
          },
          "polotno_json": {
            "type": [
              "string",
              "null"
            ],
            "description": "String representation of a polotno JSON object, used as the published version of the template.",
            "example": "{'width': 850, 'height': 1100}",
            "minLength": 0,
            "maxLength": 99999999
          },
          "draft_polotno_json": {
            "type": [
              "string",
              "null"
            ],
            "description": "String representation of a polotno JSON object, used as the draft version of the template",
            "example": "{'width': 850, 'height': 1100}",
            "minLength": 0,
            "maxLength": 999999
          },
          "app_version": {
            "type": [
              "string",
              "null"
            ],
            "example": "1.0.0",
            "minLength": 0,
            "maxLength": 255,
            "description": "The version of the MMB app used to save this record."
          },
          "category_ids": {
            "type": [
              "array",
              "null"
            ],
            "description": "Array of category IDs to attach to the template.",
            "items": {
              "description": "ID of a marketing material category. UUID Version 4.",
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "format": "uuid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            }
          }
        },
        "additionalProperties": false
      },
      "MarketingMaterialTemplatePublishPayload": {
        "title": "MarketingMaterialTemplatePublishPayload",
        "type": "object",
        "description": "Payload for publishing a marketing material template record.",
        "properties": {
          "polotno_json": {
            "type": [
              "string",
              "null"
            ],
            "description": "String representation of a polotno JSON object.",
            "minLength": 0,
            "maxLength": 99999999,
            "example": "{'width': 850, 'height': 1100}"
          }
        },
        "additionalProperties": false
      },
      "UserResource": {
        "title": "UserResource",
        "type": "object",
        "description": "A user.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "$ref": "#/components/schemas/User"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "MePasswordPutPayload": {
        "title": "MePasswordPutPayload",
        "type": "object",
        "description": "A request to change the currently authenticated user's password.",
        "properties": {
          "current_password": {
            "type": "string",
            "description": "A user's current password.",
            "example": "@Rye0Rul3z",
            "minLength": 0,
            "maxLength": 255
          },
          "new_password": {
            "type": "string",
            "description": "A new password.",
            "example": "P@$$w0Rd",
            "minLength": 0,
            "maxLength": 255
          },
          "new_password_confirmation": {
            "type": "string",
            "example": "P@$$w0Rd",
            "minLength": 0,
            "maxLength": 255,
            "description": "A copy of the new password for confirmation purposes."
          }
        },
        "required": [
          "current_password",
          "new_password",
          "new_password_confirmation"
        ],
        "additionalProperties": false
      },
      "MediaRequestMediaSearchPayload": {
        "title": "MediaRequestMediaSearchPayload",
        "type": "object",
        "description": "Payload for searching for listings that match the media request customer.",
        "properties": {
          "suggested": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "If true, only suggested listings or orders will be returned that match the media request address and customer.",
            "example": true
          },
          "search": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "description": "Search for listings or orders that match the media request customer and are not already associated with a media request.",
            "example": "resource"
          }
        },
        "additionalProperties": false
      },
      "MediaSearchResource": {
        "title": "MediaSearchResource",
        "type": "object",
        "description": "An object containing listings or orders.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "type": "object",
            "description": "A collection of listings and orders.",
            "properties": {
              "object": {
                "type": "string",
                "minLength": 26,
                "maxLength": 26,
                "enum": [
                  "MEDIA_REQUEST_MEDIA_SEARCH"
                ],
                "example": "MEDIA_REQUEST_MEDIA_SEARCH",
                "description": "A canonical value representing a resource."
              },
              "listings": {
                "type": "array",
                "description": "A collection of listings.",
                "items": {
                  "$ref": "#/components/schemas/Listing"
                }
              },
              "orders": {
                "type": "array",
                "description": "A collection of orders.",
                "items": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "required": [
              "listings",
              "orders"
            ],
            "additionalProperties": false
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "NotificationPreference": {
        "title": "NotificationPreference",
        "type": "object",
        "description": "A notification preference.",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 44,
            "maxLength": 44,
            "enum": [
              "APP\\NOTIFICATIONS\\MODELS\\NOTIFICATIONCHANNEL"
            ],
            "example": "APP\\NOTIFICATIONS\\MODELS\\NOTIFICATIONCHANNEL",
            "description": "A canonical value representing a resource."
          },
          "notification_type": {
            "type": "string",
            "description": "The notification type.",
            "enum": [
              "CREATOR_ORDER_RECEIVED",
              "CREATOR_ORDER_PAYMENT_PROCESSED",
              "CREATOR_APPOINTMENT_SCHEDULED",
              "CREATOR_APPOINTMENT_RESCHEDULED",
              "CREATOR_APPOINTMENT_CANCELED",
              "CREATOR_APPOINTMENT_POSTPONED",
              "CREATOR_APPOINTMENT_ASSIGNED",
              "CREATOR_APPOINTMENT_UNASSIGNED",
              "CREATOR_APPOINTMENT_REMINDER",
              "CREATOR_CUSTOMER_TEAM_INVITATION",
              "CREATOR_UPCOMING_APPOINTMENTS_SUMMARY",
              "CREATOR_EXPORT_READY",
              "CREATOR_TEAM_MEMBER_INVITATION",
              "LISTING_DELIVERY",
              "CUSTOMER_ORDER_CONFIRMATION",
              "CUSTOMER_ORDER_PAYMENT_REQUIRED",
              "CUSTOMER_APPOINTMENT_SCHEDULED",
              "CUSTOMER_APPOINTMENT_RESCHEDULED",
              "CUSTOMER_APPOINTMENT_CANCELED",
              "CUSTOMER_APPOINTMENT_POSTPONED",
              "CUSTOMER_APPOINTMENT_REMINDER",
              "CUSTOMER_NEW_LEAD",
              "CUSTOMER_TEAM_INVITATION",
              "CUSTOMER_USER_VERIFICATION",
              "CUSTOMER_USER_RESET_PASSWORD",
              "CUSTOMER_USER_ACTIVATION",
              "PORTAL_CUSTOM"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "CUSTOMER_APPOINTMENT_CANCELED"
          },
          "push": {
            "type": "boolean",
            "example": true,
            "description": "Is the push channel enabled?"
          },
          "sms": {
            "type": "boolean",
            "example": true,
            "description": "Is the sms channel enabled?"
          },
          "in_app": {
            "type": "boolean",
            "example": true,
            "description": "Is the in-app channel enabled?"
          },
          "email": {
            "type": "boolean",
            "example": true,
            "description": "Is the email channel enabled?"
          }
        },
        "required": [
          "notification_type",
          "email",
          "sms",
          "in_app",
          "push"
        ],
        "additionalProperties": false
      },
      "NotificationPreferencesCollection": {
        "title": "NotificationPreferencesCollection",
        "type": "object",
        "description": "A collection of notification preferences.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "type": [
              "array",
              "null"
            ],
            "description": "A collection of objects.",
            "items": {
              "$ref": "#/components/schemas/NotificationPreference"
            }
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "NotificationPreferencesPutPayload": {
        "title": "NotificationPreferencesPutPayload",
        "type": "object",
        "description": "A request to change the user's notification preferences.",
        "properties": {
          "preferences": {
            "type": [
              "array",
              "null"
            ],
            "description": "A notification preference.",
            "items": {
              "$ref": "#/components/schemas/NotificationPreference"
            }
          }
        },
        "required": [
          "preferences"
        ],
        "additionalProperties": false
      },
      "OrderCollection": {
        "title": "OrderCollection",
        "type": "object",
        "description": "A collection of orders.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "type": [
              "array",
              "null"
            ],
            "description": "A collection of objects.",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "OrderPostPayload": {
        "title": "OrderPostPayload",
        "type": "object",
        "description": "Payload for creating an order.",
        "properties": {
          "fulfillment_status": {
            "type": [
              "string",
              "null"
            ],
            "description": "The fulfillment status of the order. Defaults to 'UNFULFILLED'.",
            "enum": [
              "FULFILLED",
              "UNFULFILLED"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "FULFILLED"
          },
          "internal_notes": {
            "type": [
              "string",
              "null"
            ],
            "description": "Internal notes that will be attached to the order. Viewable only by the team.",
            "minLength": 0,
            "maxLength": 2550,
            "example": "Private note about the order!"
          },
          "address_id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the address to associate with the order. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "customer_id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the customer to associate with the order. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "company_id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the company to associate with the order. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "customer_team_membership_id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the customer team membership to associate with the order. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "listing_id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the listing to associate with the order. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "notify": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "Indicates if the customer and creator notifications should be sent when creating the order. Requires an address and customer to be set in order for the notifications to be sent."
          },
          "lock_download_for_payment": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "Indicates if the downloads for the attached listing should be locked while there is an outstanding balance on the order."
          },
          "allow_payments_before_fulfillment": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "Indicates if the order will allow payments from the customer before the order is marked as fulfilled."
          },
          "product_items": {
            "type": "array",
            "description": "An array of product items.",
            "items": {
              "type": "object",
              "description": "Variants of this products.",
              "properties": {
                "variant_id": {
                  "type": "string",
                  "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
                  "example": "00000000-0000-4000-8000-000000000000",
                  "minLength": 36,
                  "maxLength": 36,
                  "format": "uuid",
                  "description": "ID of the product variant to associate with the order item. UUID Version 4."
                },
                "quantity": {
                  "type": "integer",
                  "example": 3,
                  "description": "A positive integer representing the number of instances of this item that was or will be serviced."
                }
              },
              "additionalProperties": false
            }
          }
        },
        "additionalProperties": false
      },
      "OrderResource": {
        "title": "OrderResource",
        "type": "object",
        "description": "An order.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "$ref": "#/components/schemas/Order"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "PaymentResource": {
        "title": "OrderPaymentResource",
        "type": "object",
        "description": "An order payment.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "$ref": "#/components/schemas/Payment"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status",
          "data"
        ],
        "additionalProperties": false
      },
      "OrderTagsPutPayload": {
        "title": "OrderTagsPutPayload",
        "type": "object",
        "description": "A request to change the currently authenticated user's password.",
        "properties": {
          "tag_ids": {
            "type": "array",
            "description": "Array of tag IDs to attach to the order.",
            "items": {
              "description": "ID of a tag. UUID Version 4.",
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "format": "uuid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            }
          }
        },
        "required": [
          "tag_ids"
        ],
        "additionalProperties": false
      },
      "OrderFormSessionPostPayload": {
        "title": "OrderFormSessionPostPayload",
        "type": "object",
        "description": "Payload for creating an OrderFormSession to be used for an order form.",
        "properties": {
          "order_form_id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "description": "ID of an order form to associate with the order form session. UUID Version 4."
          },
          "address_id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of an address to associate with the order form session. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "address_data": {
            "type": "object",
            "description": "Data used to generate a new Address object inline. If you create an address upfront, pass the address_id parameter. Otherwise, this address_data will be used to scaffold a new Address object, if present.",
            "properties": {
              "latitude": {
                "type": [
                  "number",
                  "null"
                ],
                "description": "The geographic latitude of some reference point of the location, specified in degrees and decimal parts. Positive numbers must not include the plus symbol.",
                "example": 42.35157458574123,
                "minimum": -180,
                "maximum": 180
              },
              "longitude": {
                "type": [
                  "number",
                  "null"
                ],
                "description": "The geographic longitude of some reference point of the location, specified in degrees and decimal parts. Positive numbers must not include the plus symbol.",
                "example": -71.05763741484657,
                "maximum": 180,
                "minimum": -180
              },
              "street_number": {
                "type": [
                  "string",
                  "null"
                ],
                "minLength": 0,
                "maxLength": 255,
                "example": "107",
                "description": "The street number portion of a location's address. In some areas, the street number may contain non-numeric characters. This field can also contain extensions and modifiers to the street number, such as '1/2' or '-B'."
              },
              "street_name": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The street name portion of a location's address.",
                "minLength": 0,
                "maxLength": 255,
                "example": "South St"
              },
              "unit_number": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The number or portion of a larger building or complex. Examples are: 'APT G', '55', etc.",
                "minLength": 0,
                "maxLength": 255,
                "example": "Unit 2F"
              },
              "postal_code": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The postal code portion of a location's address.",
                "example": "02111",
                "minLength": 0,
                "maxLength": 255
              },
              "city": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The city of a location's address.",
                "example": "Boston",
                "minLength": 0,
                "maxLength": 255
              },
              "city_region": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "A sub-section or area of a defined city. Examples would be SoHo in New York, NY, Ironbound in Newark, NJ or Inside the Beltway.",
                "minLength": 0,
                "maxLength": 255,
                "example": "Leather District"
              },
              "county_or_parish": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The County, Parish or other regional authority of the location.",
                "minLength": 0,
                "maxLength": 255,
                "example": "Suffolk County"
              },
              "state_or_province": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The ISO 3166-2 subdivision code for the state or province of the location. For example, \u201cMA\u201d for Massachusetts, United States.",
                "minLength": 0,
                "maxLength": 255,
                "example": "MA"
              },
              "state_or_province_region": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "A sub-section or area of a defined state or province. Examples would be the Keys in FL or Hudson Valley in NY.",
                "minLength": 0,
                "maxLength": 255,
                "example": "Cape Cod"
              },
              "country": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The ISO 3166-1 country code for this for the country of the location.",
                "minLength": 0,
                "maxLength": 255,
                "example": "US"
              },
              "country_region": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "A sub-section or area of a defined country. Examples would be Napa Valley in the US, or the Amalfi Coast in Italy.",
                "example": "Napa Valley",
                "minLength": 0,
                "maxLength": 255
              }
            },
            "additionalProperties": false
          },
          "customer_id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the customer to associate with the order form session. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "customer_group_id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the customer group to associate with the order form session. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "customer_data": {
            "type": "object",
            "description": "Data used to generate or retrieve a Customer object inline. If you create an customer upfront, pass the customer_id parameter. Otherwise, this customer_data will be used to scaffold a new Customer (Group) object, if present.",
            "properties": {
              "sso_id": {
                "type": "string",
                "maxLength": 255,
                "minLength": 0,
                "example": "auth0_1234567890",
                "description": "Single sign on identifier."
              },
              "sso_user_id": {
                "type": "string",
                "maxLength": 255,
                "minLength": 0,
                "example": "auth0_1234567890",
                "description": "Single sign on identifier of the customer user."
              },
              "email": {
                "type": "string",
                "format": "email",
                "minLength": 0,
                "maxLength": 255,
                "example": "john.doe@gmail.com",
                "description": "Email address of the user."
              },
              "first_name": {
                "type": [
                  "string",
                  "null"
                ],
                "maxLength": 255,
                "minLength": 0,
                "example": "John",
                "description": "First name of the user."
              },
              "last_name": {
                "type": [
                  "string",
                  "null"
                ],
                "minLength": 0,
                "maxLength": 255,
                "example": "Doe",
                "description": "Last name of the user."
              },
              "phone": {
                "type": [
                  "string",
                  "null"
                ],
                "example": "(123) 456-7890",
                "minLength": 0,
                "maxLength": 255,
                "description": "A phone number represented in whichever standards specified by the user, typically ###-###-#### (separated by hyphens)."
              }
            },
            "additionalProperties": false
          },
          "coupon_ids": {
            "type": "array",
            "description": "IDs of the coupons to associate with this order. ",
            "items": {
              "type": "string",
              "description": "ID of the item to associate with this coupon. ",
              "format": "uuid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000",
              "minLength": 36,
              "maxLength": 36
            }
          },
          "step_visibility": {
            "type": "object",
            "description": "Settings for hidding or showing certain steps of the order form during the booking process. Note, steps can only be hidden if all required information is supplied in the OrderFormSession. By default, all steps are shown.",
            "properties": {
              "show_address_step": {
                "type": "boolean",
                "example": true,
                "description": "If the address step is hidden or shown during the booking process. Only applicable if address_id or address_data parameters are set."
              },
              "show_customer_step": {
                "type": "boolean",
                "example": true,
                "description": "If the customer step is hidden or shown during the booking process. Only applicable if customer_id or customer_data parameters are set."
              }
            },
            "additionalProperties": false
          },
          "success_url": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "The URL the customer will be directed to after the payment or order placement is successful. By default, customers are directed to the Aryeo order confirmation page.",
            "format": "uri",
            "example": "https://my-company.aryeo.com/order-forms/00000000-0000-4000-8000-000000000000/order-confirmation"
          }
        },
        "required": [
          "order_form_id"
        ],
        "additionalProperties": false
      },
      "OrderFormSession": {
        "title": "OrderFormSession",
        "type": "object",
        "description": "An order form session is used to pre-fill information about an order being placed via an order form. Through the session, you can also configure other display settings for an order form during that session. ",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 18,
            "maxLength": 18,
            "enum": [
              "ORDER_FORM_SESSION"
            ],
            "example": "ORDER_FORM_SESSION",
            "description": "A canonical value representing a resource."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of the entity. UUID Version 4."
          },
          "order_form": {
            "$ref": "#/components/schemas/OrderForm"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "customer": {
            "$ref": "#/components/schemas/Group"
          },
          "coupons": {
            "description": "Coupons that should be automatically applied during this order form session.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coupon"
            }
          },
          "show_header": {
            "type": "boolean",
            "example": true,
            "description": "If the header of the order form is hidden or shown during the booking process."
          },
          "step_visibility": {
            "type": "object",
            "description": "Settings for hidding or showing certain steps of the order form during the booking process. Note, steps can only be hidden if all required information is supplied in the OrderFormSession.",
            "properties": {
              "show_address_step": {
                "type": "boolean",
                "example": true,
                "description": "If the address step is hidden or shown during the booking process. Only applicable if address_id or address_data parameters are set."
              },
              "show_customer_step": {
                "type": "boolean",
                "example": true,
                "description": "If the customer step is hidden or shown during the booking process. Only applicable if customer_id or customer_data parameters are set."
              }
            },
            "additionalProperties": false
          },
          "product_filters": {
            "type": "object",
            "description": "Product filters that should be automatically applied during this order form session.",
            "properties": {
              "filter_by_square_feet": {
                "type": [
                  "boolean",
                  "null"
                ],
                "description": "Indicates if the order should be filtered by square feet.",
                "example": true
              },
              "filter_by_list_price": {
                "type": [
                  "boolean",
                  "null"
                ],
                "description": "Indicates if the order should be filtered by list price.",
                "example": true
              }
            },
            "additionalProperties": false
          },
          "success_url": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "The URL the customer will be directed to after the payment or order placement is successful. By default, customers are directed to the Aryeo order confirmation page.",
            "format": "uri",
            "example": "https://my-company.aryeo.com/order-forms/00000000-0000-4000-8000-000000000000/order-confirmation"
          },
          "url": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "The URL of the order form session. Redirect customers to this URL to take them to correct order form.",
            "format": "uri",
            "example": "https://my-company.aryeo.com/order-form-sessions/00000000-0000-4000-8000-000000000000"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false
      },
      "OrderFormSessionResource": {
        "title": "OrderResource",
        "type": "object",
        "description": "An order.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "$ref": "#/components/schemas/OrderFormSession"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "OrderFormCollection": {
        "title": "OrderFormCollection",
        "type": "object",
        "description": "A collection of order forms.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "type": [
              "array",
              "null"
            ],
            "description": "A collection of objects.",
            "items": {
              "$ref": "#/components/schemas/OrderForm"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "OrderItemPostPayload": {
        "title": "OrderItemPostPayload",
        "type": "object",
        "description": "Payload for creating an order item.",
        "properties": {
          "order_id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the order to associate this order item to. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "product_variant_id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the product variant to create this order item from. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "quantity": {
            "type": "integer",
            "example": 3,
            "description": "A positive integer representing the number of instances of this item that was or will be serviced."
          },
          "unit_price_amount": {
            "type": "integer",
            "example": 2099,
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the cost of a single instance of this item. This is multiplied by the quantity to calculate what was or will be charged. Required when a product variant ID is not specified.",
            "minimum": 0
          },
          "title": {
            "type": "string",
            "description": "The title of the item. Required when a product variant ID is not specified.",
            "example": "Aerial Video",
            "minLength": 0,
            "maxLength": 255
          },
          "subtitle": {
            "type": "string",
            "description": "The subtitle of the item. Required when a product variant ID is not specified.",
            "example": "3000-3999 square feet",
            "minLength": 0,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "The description of the item. Required when a product variant ID is not specified.",
            "example": "A fly-by drone video of the property.",
            "minLength": 0,
            "maxLength": 255
          },
          "appointment_id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the appointment that is scheduled to service this order item. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "assigned_company_team_member_id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the company team member assigned to this order item. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          }
        },
        "required": [
          "order_id"
        ],
        "additionalProperties": false
      },
      "OrderItemResource": {
        "title": "OrderItemResource",
        "type": "object",
        "description": "An order item.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "$ref": "#/components/schemas/OrderItem"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "PortalCustomerJoinPostPayload": {
        "title": "PortalCustomerJoinPostPayload",
        "type": "object",
        "description": "Payload to add (agent) group to a creator customer list.",
        "properties": {
          "creator_group_id": {
            "type": "string",
            "description": "ID of creator group.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000"
          }
        },
        "additionalProperties": false
      },
      "PortalCustomerRegisterPostPayload": {
        "title": "PortalCustomerRegisterPostPayload",
        "type": "object",
        "properties": {
          "creator_group_id": {
            "type": "string",
            "description": "ID of creator group.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          },
          "first_name": {
            "type": "string",
            "description": "First name.",
            "example": "John",
            "minLength": 0,
            "maxLength": 255
          },
          "last_name": {
            "type": "string",
            "description": "Last name.",
            "example": "Doe",
            "minLength": 0,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "An email.",
            "format": "email",
            "example": "john.doe@gmail.com",
            "minLength": 0,
            "maxLength": 255
          },
          "password": {
            "type": "string",
            "description": "A password.",
            "example": "P@$$w0Rd",
            "minLength": 0,
            "maxLength": 255
          },
          "password_confirmation": {
            "type": "string",
            "example": "P@$$w0Rd",
            "minLength": 0,
            "maxLength": 255,
            "description": "A copy of the password for confirmation purposes."
          },
          "client": {
            "type": "string",
            "description": "The type of client.",
            "example": "IOS",
            "minLength": 1,
            "maxLength": 255,
            "enum": [
              "IOS",
              "ANDROID",
              "PHPUNIT"
            ]
          },
          "phone": {
            "type": "string",
            "description": "A phone number.",
            "example": "5555551234",
            "minLength": 8,
            "maxLength": 255
          }
        },
        "description": "Payload to create user and agent group, and to add the agent group to creator customer list.",
        "required": [
          "creator_group_id",
          "first_name",
          "last_name",
          "email",
          "password",
          "password_confirmation",
          "client"
        ],
        "additionalProperties": false
      },
      "GroupCustomer": {
        "type": "object",
        "title": "GroupCustomer",
        "description": "A collection of users that can interact with the Aryeo platform. Permissions and properties are determined based on the group's type which can be creator, agent, or brokerage.",
        "properties": {
          "object": {
            "type": "string",
            "description": "String representing the object\u2019s type. Objects of the same type share the same schema.",
            "example": "GROUP",
            "minLength": 1,
            "maxLength": 100
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of the entity. UUID Version 4.",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "type": {
            "type": "string",
            "example": "AGENT",
            "description": "The type of the group. Can be CREATOR, AGENT, or BROKERAGE, and may dictate the attributes of the group returned.",
            "minLength": 0,
            "maxLength": 255,
            "enum": [
              "CREATOR",
              "AGENT",
              "BROKERAGE"
            ]
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "description": "The name of the group.",
            "example": "John Doe Reality"
          },
          "email": {
            "type": [
              "string",
              "null"
            ],
            "format": "email",
            "minLength": 0,
            "maxLength": 255,
            "example": "john.doe@gmail.com",
            "description": "The email address of a group."
          },
          "phone": {
            "type": [
              "string",
              "null"
            ],
            "example": "6175550173",
            "minLength": 0,
            "maxLength": 255,
            "description": "A phone number represented in whichever standards specified by the group, typically ###-###-#### (separated by hyphens)."
          },
          "website_url": {
            "type": [
              "string",
              "null"
            ],
            "example": "https://www.aryeo.com",
            "minLength": 0,
            "maxLength": 255,
            "description": "The website URL of a group.",
            "format": "uri"
          },
          "logo_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "The logo URL of a group.",
            "format": "uri",
            "minLength": 0,
            "maxLength": 255,
            "example": "https://picsum.photos/300"
          },
          "office_name": {
            "type": [
              "string",
              "null"
            ],
            "example": "John Doe Brokerage",
            "minLength": 0,
            "maxLength": 255,
            "description": "The name of the brokerage or team of a real estate agent. Only returned if group's type is AGENT."
          },
          "license_number": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "12345678",
            "description": "The license number of a real estate agent. Only returned if group's type is AGENT."
          },
          "timezone": {
            "type": [
              "string",
              "null"
            ],
            "maxLength": 255,
            "minLength": 0,
            "description": "The default timezone for the group.",
            "example": "America/New_York"
          },
          "currency": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "USD",
            "description": "The default currency for the group.",
            "enum": [
              "USD",
              "CAD",
              "GBP",
              "CHF",
              "EUR",
              "AUD",
              "NZD",
              "ZAR",
              "DKK"
            ]
          },
          "slug": {
            "type": [
              "string",
              "null"
            ],
            "maxLength": 255,
            "minLength": 0,
            "description": "The slug for the group.",
            "example": "example-photography"
          },
          "order_page_url": {
            "type": [
              "string",
              "null"
            ],
            "maxLength": 255,
            "minLength": 0,
            "description": "The order page URL for the group.",
            "example": "https://example-photography.aryeo.com/order"
          },
          "feature_flags": {
            "type": [
              "array",
              "null"
            ],
            "description": "An array of feature flags for the group.",
            "items": {
              "type": "string",
              "description": "The name of the feature flag.",
              "example": "require_photographer_confirmations",
              "minLength": 1,
              "maxLength": 65535,
              "enum": [
                "alternate_unbranded_property_site_url",
                "avalara_tax_syncing",
                "avalara_taxes",
                "byop",
                "calendar",
                "calendar_event_title_modified",
                "customer_teams_order_form_landing_page_override",
                "customer_teams_product_preselect",
                "customer_portal_mobile_apps",
                "customer_select_on_order_form_products_step",
                "database_external_calendar_events",
                "default_reschedule_toggle_false",
                "download_center_fb_boost_1",
                "embedded_payments",
                "housecall_pro",
                "idp_migration_in_progress",
                "listings_create_page",
                "listings_page",
                "min_hour_targets",
                "max_travel_distance",
                "quickbooks_app",
                "require_photographer_confirmations",
                "restricted_image_downloads",
                "showcase_app",
                "showcase_order_form_visibility_designations",
                "showingtime",
                "team_member_restrictions",
                "team_member_hide_customer_pii",
                "virtual_staging_ai",
                "virtuals1_custom_sms_notification_messages",
                "webhooks",
                "zapier",
                "zendesk",
                "zillow_3d_home",
                "zillow_media_exclusives",
                "zillow_photographer_branding",
                "zillow_rentals"
              ]
            }
          },
          "order_page_background_color": {
            "type": [
              "string",
              "null"
            ],
            "maxLength": 7,
            "minLength": 7,
            "description": "The background color for the order page (has a hex value) for the group.",
            "example": "#FF0000"
          },
          "default_order_form": {
            "$ref": "#/components/schemas/OrderForm"
          },
          "use_territory_awareness": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "Indicates if the order form by default uses territories to filter available users and products."
          },
          "availability_style": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "TIME",
            "description": "The scheduling style the order form should use for timeslot selection by default.",
            "enum": [
              "TIME",
              "TIME_OF_DAY",
              "LEGACY"
            ]
          },
          "slot_interval_minutes": {
            "type": [
              "integer",
              "null"
            ],
            "example": 60,
            "description": "How frequently slotted available times are on the order form by default."
          },
          "use_automated_user_assignment": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "Indicates if the order form uses auto-assignment of users to appointments."
          },
          "automated_user_assignment_strategy": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "RECOMMENDED",
            "description": "The default assignment strategy the order form should use to assign users to appointments, if applicable.",
            "enum": [
              "RECOMMENDED",
              "HOURS_PRIORITY",
              "DISTANCE",
              "ROUND_ROBIN",
              "PRIORITY_LIST"
            ]
          },
          "show_user_names": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "Indicates if the order form by default should display user's names after they have been assigned to an appointment."
          },
          "use_instant_appointment_scheduling": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "Indicates if the order form by default instantly schedules appointments as soon as the order is placed."
          },
          "order_forms": {
            "type": [
              "array",
              "null"
            ],
            "description": "An array of order forms a vendor group provides for placing orders. Only returned if group's type is CREATOR. ",
            "items": {
              "$ref": "#/components/schemas/OrderForm"
            }
          },
          "users": {
            "type": [
              "array",
              "null"
            ],
            "description": "The Aryeo users associated with this group.",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "is_brokerage_or_brokerage_agent": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "Indicates if the group is a brokerage or brokerage agent."
          },
          "avatar_url": {
            "type": [
              "string",
              "null"
            ],
            "format": "uri",
            "example": "https://picsum.photos/300",
            "description": "The avatar image URL of a user.",
            "minLength": 0,
            "maxLength": 255
          },
          "internal_notes": {
            "type": [
              "string",
              "null"
            ],
            "description": "Internal notes about the group.",
            "minLength": 0,
            "maxLength": 2550,
            "example": "Internal notes about the group."
          },
          "team_members": {
            "type": [
              "array",
              "null"
            ],
            "description": "NOTE: Users do not have team members.",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          },
          "social_profiles": {
            "$ref": "#/components/schemas/SocialProfiles"
          },
          "customer_group": {
            "type": [
              "string",
              "null"
            ],
            "description": "NOTE: Users do not have customer groups and they are deprecated.",
            "minLength": 0,
            "maxLength": 2550,
            "example": "null"
          },
          "has_restricted_photographers": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates if the group has restricted photographers.",
            "example": true
          },
          "custom_field_entries": {
            "type": [
              "array",
              "null"
            ],
            "description": "NOTE: Need to make a migration plan for this.",
            "items": {
              "type": "object",
              "description": "Custom field entries for the group.",
              "additionalProperties": false
            }
          },
          "billing_address": {
            "type": [
              "string",
              "null"
            ],
            "description": "The billing address of the group.",
            "minLength": 0,
            "maxLength": 255,
            "example": "123 Main St, Anytown, USA 12345"
          },
          "created_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date and time the group was created.",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          },
          "restricted_photographers": {
            "type": [
              "array",
              "null"
            ],
            "description": "The photographers restricted from the group.",
            "items": {
              "type": "object",
              "description": "The photographers restricted from the group.",
              "additionalProperties": false
            }
          }
        },
        "required": [
          "id",
          "type",
          "name"
        ],
        "additionalProperties": false
      },
      "PersonalAccessTokenCustomer": {
        "type": "object",
        "title": "PersonalAccessTokenCustomer",
        "description": "A personal access token, its user, and the it's users group (if applicable).",
        "properties": {
          "object": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 255,
            "description": "A canonical value representing a resource.",
            "example": "PERSONAL_ACCESS_TOKEN"
          },
          "token": {
            "type": "string",
            "minLength": 0,
            "description": "Authorization token for a user.",
            "example": "token",
            "maxLength": 8000
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "group": {
            "$ref": "#/components/schemas/GroupCustomer"
          }
        },
        "required": [
          "token",
          "user"
        ],
        "additionalProperties": false
      },
      "PersonalAccessTokenCustomerResource": {
        "title": "PersonalAccessTokenCustomerResource",
        "type": "object",
        "description": "A personal access token.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "$ref": "#/components/schemas/PersonalAccessTokenCustomer"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "PortalCustomerVerifyPostPayload": {
        "title": "PortalCustomerVerifyPostPayload",
        "type": "object",
        "properties": {
          "company_id": {
            "type": "string",
            "description": "ID of creator group (a company).",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          },
          "email": {
            "type": "string",
            "description": "An email.",
            "format": "email",
            "example": "john.doe@gmail.com",
            "minLength": 0,
            "maxLength": 255
          },
          "verification_code": {
            "type": "string",
            "description": "A verification code.",
            "example": "123456",
            "minLength": 6,
            "maxLength": 6
          },
          "password": {
            "type": "string",
            "description": "A password.",
            "example": "P@$$w0Rd",
            "minLength": 0,
            "maxLength": 255
          },
          "password_confirmation": {
            "type": "string",
            "example": "P@$$w0Rd",
            "minLength": 0,
            "maxLength": 255,
            "description": "A copy of the password for confirmation purposes."
          },
          "client": {
            "type": "string",
            "description": "The type of client.",
            "example": "IOS",
            "minLength": 1,
            "maxLength": 255,
            "enum": [
              "IOS",
              "ANDROID",
              "PHPUNIT"
            ]
          }
        },
        "description": "Payload to verify a user and add them to the company customer list.",
        "required": [
          "company_id",
          "email",
          "verification_code",
          "password",
          "password_confirmation",
          "client"
        ],
        "additionalProperties": false
      },
      "GroupCustomerResource": {
        "title": "GroupCustomerResource",
        "type": "object",
        "description": "A group.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "$ref": "#/components/schemas/GroupCustomer"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "PortalAppConfigPutPayload": {
        "title": "PortalAppConfigPutPayload",
        "type": "object",
        "description": "Payload for updating a portal app config.",
        "properties": {
          "app_name": {
            "type": "string",
            "description": "The name that will be displayed under your app icon.",
            "example": "Gold Sprint",
            "minLength": 0,
            "maxLength": 15
          },
          "primary_status": {
            "type": "string",
            "description": "The primary status of the app.",
            "example": "LIVE",
            "minLength": 0,
            "maxLength": 65536,
            "enum": [
              "INFO_SUBMITTED",
              "READY_TO_BUILD",
              "IN_REVIEW",
              "LIVE",
              "LIVE_NEEDS_TRANSFER",
              "DISCONTINUED"
            ]
          },
          "app_store_name": {
            "type": "string",
            "description": "The name that will be displayed on the App Store and Play Store.",
            "example": "Gold Sprint Media",
            "minLength": 0,
            "maxLength": 30
          },
          "app_store_subtitle": {
            "type": "string",
            "description": "The subtitle that will be displayed on the App Store and Play Store.",
            "example": "Real-Estate Media",
            "minLength": 0,
            "maxLength": 30
          },
          "description": {
            "type": "string",
            "description": "A description of the portal app, detailing features and functionality.",
            "example": "An app for Gold Sprint Media customers!",
            "minLength": 0,
            "maxLength": 4000
          },
          "short_description": {
            "type": "string",
            "description": "A short description for your app. Users can expand to view your full description.",
            "example": "An app for Gold Sprint Media customers!",
            "minLength": 0,
            "maxLength": 80
          },
          "keywords": {
            "type": "string",
            "description": "Keywords for search results. Separate keywords with a comma.",
            "example": "real estate photography,photography services,real estate marketing",
            "minLength": 0,
            "maxLength": 100
          },
          "marketing_url": {
            "type": "string",
            "description": "URL: Marketing information about your app.",
            "minLength": 0,
            "maxLength": 65535,
            "example": "https://aryeo.com",
            "format": "uri"
          },
          "support_url": {
            "type": "string",
            "description": "URL: Support information for your app.",
            "minLength": 0,
            "maxLength": 65535,
            "example": "https://aryeo.com",
            "format": "uri"
          },
          "package_name": {
            "type": "string",
            "description": "The reverse DNS path to the main application package. This should match your iOS bundle id.",
            "example": "com.aryeo.goldsprintmedia",
            "minLength": 0,
            "maxLength": 65535
          },
          "bundle_id": {
            "type": "string",
            "description": "The unique identifier for your app on Apple's App Store. This should be configured in Apple's Developer Portal.",
            "example": "com.aryeo.goldsprintmedia",
            "minLength": 0,
            "maxLength": 65535
          },
          "itunes_app_id": {
            "type": "string",
            "description": "The app id assigned to your app in App Store Connect. Also known as the Apple ID.",
            "example": "1620094264",
            "minLength": 0,
            "maxLength": 65535
          },
          "one_signal_app_id": {
            "type": "string",
            "description": "OneSignal app id. OneSignal is used for push notifications.",
            "minLength": 0,
            "maxLength": 65535,
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "format": "uuid"
          },
          "contact_name": {
            "type": "string",
            "description": "The name displayed in the contact section of the app.",
            "example": "Gold Sprint Media",
            "minLength": 0,
            "maxLength": 65535
          },
          "one_signal_rest_api_key": {
            "type": "string",
            "description": "One Signal Rest Api Key.",
            "minLength": 0,
            "maxLength": 255,
            "example": "ABCD"
          },
          "one_signal_custom_app_group_name": {
            "type": "string",
            "description": "One Signal Custom App Group Name used for iOS.",
            "minLength": 0,
            "maxLength": 255,
            "example": "group.com.aryeo.app.onesignal"
          },
          "firebase_project_number": {
            "type": "string",
            "description": "Firebase project number.",
            "minLength": 0,
            "maxLength": 255,
            "example": "123456789"
          },
          "aryeo_mobile_app_admin_account": {
            "type": "string",
            "description": "Aryeo mobile app admin account.",
            "minLength": 0,
            "maxLength": 255,
            "example": "app@aryeo.com"
          }
        },
        "additionalProperties": false
      },
      "PortalAppDevAccounts": {
        "title": "PortalAppDevAccounts",
        "type": "object",
        "description": "Dev accounts for a portal app.",
        "properties": {
          "apple_dev_team_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Apple Developer Account Team ID.",
            "example": "SYX7P7AL4Y",
            "minLength": 0,
            "maxLength": 255
          },
          "apple_dev_entity_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Apple Developer Account Entity Name.",
            "example": "Aryeo, Inc.",
            "minLength": 0,
            "maxLength": 255
          },
          "apple_dev_itc_team_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Apple Developer Account iTunes Connect Team ID.",
            "example": "122403578",
            "minLength": 0,
            "maxLength": 255
          },
          "google_dev_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Google Developer Account ID.",
            "example": "6305408161650676173",
            "minLength": 0,
            "maxLength": 255
          },
          "google_dev_account_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Google Developer Account Name.",
            "example": "Aryeo",
            "minLength": 0,
            "maxLength": 255
          },
          "apple_asc_api_key_url": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 1,
            "maxLength": 65536,
            "example": "https://example.com/ApiKey.p8",
            "description": "The URL for the App Store Connect Api Key (.p8) file."
          },
          "apple_asc_api_key_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The ID for the App Store Connect Api Key.",
            "example": "K12345678",
            "minLength": 0,
            "maxLength": 255
          },
          "apple_asc_api_key_issuer_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The Issuer ID used to generate the App Store Connect Api Key.",
            "example": "I12345678",
            "minLength": 0,
            "maxLength": 255
          }
        },
        "additionalProperties": false
      },
      "AppStoreDetails": {
        "title": "AppStoreDetails",
        "type": "object",
        "description": "Values displayed on an app's public-facing app store page.",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "example": "Archi-Pix",
            "description": "App store name."
          },
          "subtitle": {
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "example": "Real estate media.",
            "description": "App store subtitle."
          },
          "description": {
            "type": "string",
            "description": "A description of an app, detailing features and functionality.",
            "example": "This app is used for doing real-estate things.",
            "minLength": 0,
            "maxLength": 65536
          },
          "keywords": {
            "type": "string",
            "description": "Keywords for app store search results. Keywords should be separated with a comma.",
            "example": "real estate,photography,matterport",
            "minLength": 0,
            "maxLength": 65536
          },
          "marketing_url": {
            "type": "string",
            "description": "A URL with markerting information for an app.",
            "example": "https://www.aryeo.com",
            "minLength": 0,
            "maxLength": 65536,
            "format": "uri"
          },
          "support_url": {
            "type": "string",
            "description": "A URL with support information for an app.",
            "example": "https://www.aryeo.com",
            "minLength": 0,
            "maxLength": 65536,
            "format": "uri"
          },
          "package_name": {
            "type": "string",
            "description": "The package name/path used for an Android app.",
            "example": "com.aryeo.app",
            "minLength": 1,
            "maxLength": 65535
          },
          "bundle_id": {
            "type": "string",
            "description": "The unique identifier for your app on Apple's App Store. This should be configured in Apple's Developer Portal.",
            "example": "com.aryeo.app",
            "minLength": 1,
            "maxLength": 65535
          },
          "itunes_app_id": {
            "type": "string",
            "description": "The app id assigned to your app in App Store Connect. Also known as the Apple ID.",
            "example": "12345678",
            "minLength": 1,
            "maxLength": 65535
          },
          "version_minimum": {
            "type": "string",
            "description": "The minimum version of the app which should be installed on a user's device.",
            "example": "1.2.0",
            "minLength": 1,
            "maxLength": 65535
          },
          "version_latest_android": {
            "type": "string",
            "description": "The latest available Android version on the Google Play Store.",
            "example": "1.3.0",
            "minLength": 1,
            "maxLength": 65535
          },
          "version_latest_ios": {
            "type": "string",
            "description": "The latest available iOS version on the Apple App Store.",
            "example": "1.3.0",
            "minLength": 1,
            "maxLength": 65535
          }
        },
        "additionalProperties": false
      },
      "AppAndroidDetails": {
        "title": "AppAndroidDetails",
        "type": "object",
        "description": "Details about an Android app.",
        "properties": {
          "package_name": {
            "type": "string",
            "description": "The package name/path used for an Android app.",
            "example": "com.aryeo.app",
            "minLength": 1,
            "maxLength": 65535
          }
        },
        "additionalProperties": false
      },
      "AppIOSDetails": {
        "title": "AppIOSDetails",
        "type": "object",
        "description": "Details about an iOS app.",
        "properties": {
          "bundle_id": {
            "type": "string",
            "description": "The unique identifier for your app on Apple's App Store. This should be configured in Apple's Developer Portal.",
            "example": "com.aryeo.app",
            "minLength": 1,
            "maxLength": 65535
          },
          "itunes_app_id": {
            "type": "string",
            "description": "The app id assigned to your app in App Store Connect. Also known as the Apple ID.",
            "example": "12345678",
            "minLength": 1,
            "maxLength": 65535
          }
        },
        "additionalProperties": false
      },
      "PortalAppExampleOrder": {
        "title": "PortalAppExampleOrder",
        "type": "object",
        "description": "Values used for the example property shown on public-facing app store pages and screenshots.",
        "properties": {
          "unparsed_address_part_one": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "Unparsed text representation of the first part of the address, typically including the street number, street name, and unit number if applicable.",
            "example": "107 South St, Unit 2F"
          },
          "unparsed_address_part_two": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "Unparsed text representation of the second part of the address, typically including the city, state or province, and postal code.",
            "example": "Boston, MA 02111"
          },
          "latitude": {
            "type": "number",
            "description": "The geographic latitude of some reference point of the location, specified in degrees and decimal parts. Positive numbers must not include the plus symbol.",
            "example": 42.35157458574123,
            "minimum": -180,
            "maximum": 180
          },
          "longitude": {
            "type": "number",
            "description": "The geographic longitude of some reference point of the location, specified in degrees and decimal parts. Positive numbers must not include the plus symbol.",
            "example": -71.05763741484657,
            "maximum": 180,
            "minimum": -180
          },
          "image_url": {
            "type": "string",
            "description": "A URL for an example property image.",
            "example": "https://picsum.photos/400/200",
            "minLength": 0,
            "maxLength": 65536,
            "format": "uri"
          }
        },
        "additionalProperties": false
      },
      "PortalAppContactLegacy": {
        "title": "PortalAppContactLegacy",
        "type": "object",
        "description": "Values displayed in the contact section of a portal app.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "Archi-Pix",
            "description": "A name to show on the in-app contact page."
          },
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 0,
            "maxLength": 255,
            "example": "john.doe@gmail.com",
            "description": "An email address."
          },
          "phone": {
            "type": "string",
            "example": "6175550173",
            "minLength": 0,
            "maxLength": 255,
            "description": "A phone number separated by hyphens."
          }
        },
        "additionalProperties": false
      },
      "PortalAppContact": {
        "title": "PortalAppContact",
        "type": "object",
        "description": "Values displayed in the contact section of a portal app.",
        "properties": {
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "description": "Resource id",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "East Office",
            "description": "Name of contact."
          },
          "call": {
            "type": "string",
            "example": "6175550173",
            "minLength": 0,
            "maxLength": 255,
            "description": "A phone number used for calling."
          },
          "text": {
            "type": "string",
            "example": "6175550173",
            "minLength": 0,
            "maxLength": 255,
            "description": "A phone number used for texting."
          },
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 0,
            "maxLength": 255,
            "example": "john.doe@gmail.com",
            "description": "An email address."
          },
          "link_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "A link for this contact.",
            "example": "https://www.example.com/contact",
            "maxLength": 65535,
            "minLength": 0
          },
          "link": {
            "type": [
              "string",
              "null"
            ],
            "description": "A link for this contact.",
            "example": "https://www.example.com/contact",
            "maxLength": 65535,
            "minLength": 0
          },
          "link_title": {
            "type": "string",
            "example": "Contact page",
            "minLength": 0,
            "maxLength": 255,
            "description": "A title to use for the link."
          }
        },
        "additionalProperties": false
      },
      "PortalAppSettings": {
        "title": "PortalAppSettings",
        "type": "object",
        "description": "Settings used by a portal app.",
        "properties": {
          "external_form_domain_whitelist": {
            "type": "string",
            "maxLength": 65535,
            "minLength": 0,
            "example": "google.com,aryeo.com",
            "description": "A comma-separated list of domains to whitelist when using external forms"
          }
        },
        "additionalProperties": false
      },
      "PortalAppStrings": {
        "title": "PortalAppStrings",
        "type": "object",
        "description": "Strings used by a portal app.",
        "properties": {
          "headline": {
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "example": "Shop with Archi-Pix",
            "description": "Headline."
          }
        },
        "additionalProperties": false
      },
      "PortalAppColors": {
        "title": "PortalAppColors",
        "type": "object",
        "description": "Colors used by a portal app",
        "properties": {
          "lightest": {
            "type": "string",
            "maxLength": 7,
            "minLength": 0,
            "example": "#67c9f2",
            "description": "Lightest color."
          },
          "light": {
            "type": "string",
            "maxLength": 7,
            "minLength": 0,
            "example": "#43bdf0",
            "description": "Light color."
          },
          "default": {
            "type": "string",
            "maxLength": 7,
            "minLength": 0,
            "example": "#24ace4",
            "description": "Default color."
          },
          "dark": {
            "type": "string",
            "maxLength": 7,
            "minLength": 0,
            "example": "#0e8cbf",
            "description": "Dark color."
          },
          "loading_background": {
            "type": "string",
            "maxLength": 7,
            "minLength": 0,
            "example": "#24ace4",
            "description": "Loading background color."
          }
        },
        "additionalProperties": false
      },
      "PortalAppImages": {
        "title": "PortalAppImages",
        "type": "object",
        "description": "Images used by a portal app.",
        "properties": {
          "app_icon_url": {
            "type": "string",
            "description": "A URL for the app icon.",
            "example": "https://picsum.photos/1024",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri"
          },
          "logo_url": {
            "type": "string",
            "description": "A URL for the logo.",
            "example": "https://picsum.photos/256",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri"
          },
          "hero_url": {
            "type": "string",
            "description": "A URL for a hero image.",
            "example": "https://picsum.photos/500/200",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri"
          }
        },
        "additionalProperties": false
      },
      "PortalAppConfig": {
        "title": "PortalAppConfig",
        "type": "object",
        "description": "Configuration parameters for a customer portal app.",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 17,
            "maxLength": 17,
            "enum": [
              "PORTAL_APP_CONFIG"
            ],
            "example": "PORTAL_APP_CONFIG",
            "description": "A canonical value representing a resource."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of the entity. UUID Version 4.",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          },
          "app_name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "example": "Archi-Pix",
            "description": "App name."
          },
          "dev_accounts": {
            "$ref": "#/components/schemas/PortalAppDevAccounts"
          },
          "primary_status": {
            "type": "string",
            "description": "The primary status of the portal app.",
            "enum": [
              "INFO_SUBMITTED",
              "READY_TO_BUILD",
              "IN_REVIEW",
              "LIVE",
              "LIVE_NEEDS_TRANSFER",
              "DISCONTINUED"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "LIVE"
          },
          "testing_user_email": {
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "example": "app+archi_pix-mobile-app-testing-agent@aryeo.com",
            "description": "The email of the user created for testing the mobile app."
          },
          "aryeo_mobile_app_admin_account": {
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "example": "app@aryeo.com",
            "description": "The Aryeo admin account used to access this company's Apple and Google developer accounts."
          },
          "one_signal_app_id": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "One Signal App Id. UUID Version 4.",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "one_signal_rest_api_key": {
            "type": "string",
            "description": "One Signal Rest Api Key.",
            "minLength": 0,
            "maxLength": 255,
            "example": "ABCD"
          },
          "one_signal_custom_app_group_name": {
            "type": "string",
            "description": "One Signal Custom App Group Name used for iOS.",
            "minLength": 0,
            "maxLength": 255,
            "example": "group.com.aryeo.app.onesignal"
          },
          "firebase_project_number": {
            "type": "string",
            "description": "Firebase project number.",
            "minLength": 0,
            "maxLength": 255,
            "example": "123456789"
          },
          "app_store": {
            "$ref": "#/components/schemas/AppStoreDetails"
          },
          "android": {
            "$ref": "#/components/schemas/AppAndroidDetails"
          },
          "ios": {
            "$ref": "#/components/schemas/AppIOSDetails"
          },
          "example_order": {
            "$ref": "#/components/schemas/PortalAppExampleOrder"
          },
          "contact": {
            "$ref": "#/components/schemas/PortalAppContactLegacy"
          },
          "contacts": {
            "type": "array",
            "description": "The list of contacts for the portal app.",
            "items": {
              "$ref": "#/components/schemas/PortalAppContact"
            }
          },
          "settings": {
            "$ref": "#/components/schemas/PortalAppSettings"
          },
          "strings": {
            "$ref": "#/components/schemas/PortalAppStrings"
          },
          "colors": {
            "$ref": "#/components/schemas/PortalAppColors"
          },
          "images": {
            "$ref": "#/components/schemas/PortalAppImages"
          },
          "vendor": {
            "$ref": "#/components/schemas/Group"
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time (ISO 8601 format) when the config was last updated.",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false
      },
      "PortalAppConfigResource": {
        "title": "PortalAppConfigResource",
        "type": "object",
        "description": "A portal app config.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "$ref": "#/components/schemas/PortalAppConfig"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "ProductCollection": {
        "title": "ProductCollection",
        "type": "object",
        "description": "A collection of products.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "type": [
              "array",
              "null"
            ],
            "description": "A collection of objects.",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "ProductCategoryCollection": {
        "title": "ProductCatgoryCollection",
        "type": "object",
        "description": "A collection of product categories.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/ProductCategory"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "CalendarDay": {
        "description": "A bookable time range with available users.",
        "type": "object",
        "title": "CalendarDay",
        "properties": {
          "date": {
            "type": "string",
            "minLength": 10,
            "maxLength": 10,
            "example": "2021-01-01",
            "description": "Calendar day that has available timeslots."
          },
          "is_available": {
            "type": "boolean",
            "example": true,
            "description": "Does the day have availability?"
          }
        },
        "required": [
          "date",
          "is_available"
        ],
        "additionalProperties": false
      },
      "CalendarDayCollectionMeta": {
        "title": "CalendarDayCollectionMeta",
        "type": "object",
        "description": "Metadata about a calendar day paginated response.",
        "properties": {
          "group_id": {
            "type": [
              "string",
              "null"
            ],
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "description": "The ID of the group."
          },
          "company_id": {
            "type": "string",
            "description": "The ID of the group (company).",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "company_team_member_ids": {
            "type": "array",
            "description": "Array of company team member IDs.",
            "items": {
              "description": "ID of a user. UUID Version 4.",
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "format": "uuid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            }
          },
          "user_ids": {
            "type": "array",
            "description": "Array of user IDs.",
            "items": {
              "description": "ID of a user. UUID Version 4.",
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "format": "uuid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
              "example": "00000000-0000-4000-8000-000000000000"
            }
          },
          "appointment_id": {
            "type": [
              "string",
              "null"
            ],
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "description": "ID of the entity. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "start_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "Range start time.",
            "example": "2021-06-30T20:30:00Z",
            "minLength": 20,
            "maxLength": 20,
            "format": "date-time"
          },
          "end_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "Range end time.",
            "example": "2021-06-30T21:30:00Z",
            "minLength": 20,
            "maxLength": 20,
            "format": "date-time"
          },
          "timezone": {
            "type": [
              "string",
              "null"
            ],
            "description": "The timezone.",
            "minLength": 3,
            "maxLength": 255,
            "example": "CST"
          },
          "is_twilight": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true,
            "description": "Is twlight?"
          },
          "interval": {
            "type": [
              "integer",
              "null"
            ],
            "example": 30,
            "description": "Interval length."
          },
          "duration": {
            "type": [
              "integer",
              "null"
            ],
            "example": 30,
            "description": "Duration length."
          },
          "current_page": {
            "type": "integer",
            "description": "The current page.",
            "example": 1
          },
          "timeframe": {
            "type": [
              "string",
              "null"
            ],
            "description": "Timeframe.",
            "minLength": 0,
            "maxLength": 255,
            "example": "DAY"
          },
          "timeframe_period": {
            "type": "object",
            "description": "Timeframe period.",
            "properties": {
              "startDate": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Start date.",
                "format": "date-time",
                "minLength": 27,
                "maxLength": 27,
                "example": "2025-04-01T05:59:59.999999Z"
              },
              "endDate": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "End date.",
                "format": "date-time",
                "minLength": 27,
                "maxLength": 27,
                "example": "2025-04-01T05:59:59.999999Z"
              },
              "startDateIncluded": {
                "type": "boolean",
                "description": "Start date included.",
                "example": true
              },
              "endDateIncluded": {
                "type": "boolean",
                "description": "End date included.",
                "example": true
              }
            },
            "required": [
              "startDate",
              "endDate",
              "startDateIncluded",
              "endDateIncluded"
            ],
            "additionalProperties": false
          },
          "from": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The ID of the first record on this page. This is specified as either `integer` or `null` purely for spec testing purposes. The model which is autogenerated from this definition will be thrown out and written by-hand.",
            "example": 1
          },
          "last_page": {
            "type": "integer",
            "description": "The last page of records.",
            "example": 4
          },
          "links": {
            "type": [
              "array",
              "null"
            ],
            "description": "Links.",
            "items": {
              "$ref": "#/components/schemas/PaginationLink"
            }
          },
          "path": {
            "type": "string",
            "description": "The current paged path.",
            "example": "https://api.aryeo.com/v1/{path}",
            "minLength": 1,
            "maxLength": 65535
          },
          "per_page": {
            "type": "integer",
            "description": "Number of records per page.",
            "example": 15
          },
          "to": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The ID of the last record on this page. This is specified as either `integer` or `null` purely for spec testing purposes. The model which is autogenerated from this definition will be thrown out and written by-hand.",
            "example": 15
          },
          "total": {
            "type": "integer",
            "description": "Total number of records.",
            "example": 50
          }
        },
        "required": [
          "current_page"
        ],
        "additionalProperties": false
      },
      "CalendarDayCollection": {
        "title": "CalendarDayCollection",
        "type": "object",
        "description": "A collection of calendar days that have available timeslots",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "type": [
              "array",
              "null"
            ],
            "description": "A collection of objects.",
            "items": {
              "$ref": "#/components/schemas/CalendarDay"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/CalendarDayCollectionMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "Timeslot": {
        "description": "A bookable time range, including users that are available.",
        "type": "object",
        "title": "Timeslot",
        "properties": {
          "start_at": {
            "type": "string",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-01-01T00:00:00Z",
            "description": "Start time of the available slot"
          },
          "end_at": {
            "type": "string",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-01-01T00:30:00Z",
            "description": "End time of the available slot"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        },
        "required": [
          "start_at",
          "end_at"
        ],
        "additionalProperties": false
      },
      "TimeslotCollection": {
        "title": "TimeslotCollection",
        "type": "object",
        "description": "A collection of bookable timeslots.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "type": [
              "array",
              "null"
            ],
            "description": "A collection of objects.",
            "items": {
              "$ref": "#/components/schemas/Timeslot"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/CalendarDayCollectionMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "TagCollection": {
        "title": "TagCollection",
        "type": "object",
        "description": "A collection of tags.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "type": [
              "array",
              "null"
            ],
            "description": "A collection of objects.",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "TagResource": {
        "title": "TagResource",
        "type": "object",
        "description": "A tag response resource.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "$ref": "#/components/schemas/Tag"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "TaxPostPayload": {
        "title": "TaxPostPayload",
        "type": "object",
        "description": "Payload for creating a tax.",
        "properties": {
          "order_id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "description": "ID of the order apply this tax to. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "tax_rate_data": {
            "type": "object",
            "description": "Data to construct an ad hoc tax rate inline to apply to this order.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the tax.",
                "example": "New York State Tax",
                "minLength": 0,
                "maxLength": 255
              },
              "description": {
                "type": "string",
                "description": "The description of the tax rate.",
                "example": "Tax rate applied for any property that falls within the bounds New York State.",
                "minLength": 0,
                "maxLength": 65536
              },
              "applied_rate": {
                "type": "number",
                "format": "float",
                "example": 0.075,
                "minimum": 0,
                "maximum": 1,
                "description": "A decimal value representing the rate that should be applied to a taxed entity. For example, 0.075 would represent an applied tax percentage of 7.5%."
              }
            },
            "additionalProperties": false
          }
        },
        "required": [
          "order_id"
        ],
        "additionalProperties": false
      },
      "TaxResource": {
        "title": "TaxResouce",
        "type": "object",
        "description": "A tax response resource.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "$ref": "#/components/schemas/Tax"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "Territory": {
        "title": "Territory",
        "type": "object",
        "description": "A region where a company offers services.",
        "properties": {
          "object": {
            "type": "string",
            "minLength": 9,
            "maxLength": 9,
            "enum": [
              "TERRITORY"
            ],
            "example": "TERRITORY",
            "description": "A canonical value representing a resource."
          },
          "id": {
            "type": "string",
            "description": "ID of the entity. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          },
          "name": {
            "type": "string",
            "description": "The name of the territory.",
            "example": "New York City",
            "minLength": 1,
            "maxLength": 255
          }
        },
        "required": [
          "id",
          "name"
        ],
        "additionalProperties": false
      },
      "TerritoryCollection": {
        "title": "TerritoryCollection",
        "type": "object",
        "description": "A collection of territories.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/Territory"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "UserCollection": {
        "title": "UserCollection",
        "type": "object",
        "description": "A collection of users.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "type": [
              "array",
              "null"
            ],
            "description": "A collection of objects.",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "VonageMessage": {
        "title": "Message",
        "type": "object",
        "properties": {
          "name": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 0,
            "maxLength": 65536,
            "example": "Message name",
            "description": "The name (source) of the message."
          },
          "payload": {
            "type": "object",
            "description": "A generic payload containing metadata about the activity.",
            "additionalProperties": true
          },
          "exception": {
            "type": [
              "string",
              "null"
            ],
            "description": "The exception message if the message failed to send.",
            "minLength": 0,
            "maxLength": 65536,
            "example": "Exception message"
          },
          "url": {
            "type": [
              "string",
              "null"
            ],
            "description": "The URL of the message.",
            "example": "https://api.vonage.com/v1/messages/1234567890",
            "minLength": 1,
            "maxLength": 65535
          },
          "headers": {
            "type": "object",
            "description": "The headers of the message.",
            "additionalProperties": true
          },
          "created_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date and time (ISO 8601 format) when the message was created.",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          },
          "updated_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date and time (ISO 8601 format) when the message was last updated.",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "description": "Valuation data relating to the price of a listing.",
        "additionalProperties": false
      },
      "VonageMessageCollection": {
        "title": "MessageCollection",
        "type": "object",
        "description": "A collection of messages.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "type": [
              "array",
              "null"
            ],
            "description": "A collection of objects.",
            "items": {
              "$ref": "#/components/schemas/VonageMessage"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "VideoResource": {
        "title": "VideoResource",
        "type": "object",
        "description": "A video.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?"
          },
          "data": {
            "$ref": "#/components/schemas/Video"
          },
          "timestamp": {
            "type": [
              "string",
              "null"
            ],
            "description": "The request timestamp (ISO 8601).",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-06-30T20:30:00Z"
          }
        },
        "required": [
          "status"
        ],
        "additionalProperties": false
      },
      "VideoPutPayload": {
        "title": "VideoPutPayload",
        "type": "object",
        "description": "Payload to update a video.",
        "properties": {
          "title": {
            "type": "string",
            "description": "The name of the video.",
            "example": "Home Walkthrough Video",
            "minLength": 1,
            "maxLength": 100
          }
        },
        "required": [
          "title"
        ],
        "additionalProperties": false
      }
    }
  }
}